<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | It's SOAP's Fault...]]></title>
  <link href="http://blog.poznachowski.pl/categories/api/atom.xml" rel="self"/>
  <link href="http://blog.poznachowski.pl/"/>
  <updated>2016-04-01T17:21:00+02:00</updated>
  <id>http://blog.poznachowski.pl/</id>
  <author>
    <name><![CDATA[Grzegorz Poznachowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ascidoc]]></title>
    <link href="http://blog.poznachowski.pl/2015/12/12/ascidoc/"/>
    <updated>2015-12-12T00:00:00+01:00</updated>
    <id>http://blog.poznachowski.pl/2015/12/12/ascidoc</id>
    <content type="html"><![CDATA[<p>Continuation of <code>Windows</code> and <code>Docker</code> integration guide.
The goal of this post is to show quick and easy way of creating new <code>JVM</code> project and run it as a <code>Docker</code> container on <code>Windows</code>.</p>

<p>In the http://eshepelyuk.github.io/2015/11/26/jvm-microservice-docker-windows.html[previous post] I’ve described how to setup <code>Docker</code> environment on <code>Windows</code> powered PC and run existing <code>Docker</code> container.
Now it’s time to create own <code>JVM</code> project, create <code>Docker</code> image and run it.</p>

<p>When it comes to quickly prototype something on <code>JVM</code> platform - <code>Groovy</code> is a great language choice.
Furthermore, using <code>Groovy</code> in this guide is a perfect example of <code>Docker</code> powered <code>JVM</code> microservices polyglot nature. For a build tool my natural choice is <code>Gradle</code>, that will be used in this guide as well.</p>

<p>== Setup Gradle using sdkman</p>

<p><code>Gradle</code> can be installed and added to <code>PATH</code> manually, but there exists <code>sdkman</code> tool that drastically simplifies installation of <code>Gradle</code> and other utilities.
So, I’d suggest to spend some minutes to setup it and use for <code>Gradle</code> installation.</p>

<p>. First of all <code>unzip</code> should be installed, since it is required for <code>sdkman</code> installer.
In new <code>bash</code> console execute.</p>

<p>$ pacman -S unzip</p>

<p>. Then install <code>sdkman</code>.</p>

<table>
  <tbody>
    <tr>
      <td>$ export SDKMAN_DIR=”$HOME/.sdkman” &amp;&amp; curl -s get.sdkman.io</td>
      <td>bash</td>
    </tr>
  </tbody>
</table>

<p>. After the installation there can be issues running <code>sdkman</code> in <code>msys2</code> environment.
The reason is explained in corresponding https://github.com/sdkman/sdkman-cli/pull/384[GitHub Issue]</p>

<p>.. To fix it open file <code>~/.sdkman/bin/sdkman-init.sh</code> and find the line.</p>

<p>if [[ -n “${CANDIDATE_NAME}” &amp;&amp; -h “${CANDIDATE_DIR}” ]]; then</p>

<p>.. Replace it with.</p>

<p>if [[ -n “${CANDIDATE_NAME}” &amp;&amp; -d “${CANDIDATE_DIR}” ]]; then</p>

<p>. Now <code>sdkman</code> is ready, open new <code>bash</code> console and install latest <code>Gradle</code> version.</p>

<p>$ sdk install gradle</p>

<p>. Check that <code>Gradle</code> was installed correctly (may require opening new <code>bash</code>).</p>

<h2 id="source">[source]</h2>
<p>$ gradle –version</p>

<hr />
<p>Gradle 2.9
————————————————————</p>

<p>Build time:   2015-11-17 07:02:17 UTC
Build number: none
Revision:     b463d7980c40d44c4657dc80025275b84a29e31f</p>

<p>Groovy:       2.4.4
Ant:          Apache Ant(TM) version 1.9.3 compiled on December 23 2013
JVM:          1.8.0_45 (Oracle Corporation 25.45-b02)
OS:           Windows 8.1 6.3 amd64
—-</p>

<p>== Sample Groovy application</p>

<p>. Project folder structure can be generated by running <code>Gradle</code> task.</p>

<p>$ gradle init –type groovy-library</p>

<p>. After generation <code>Library.groovy</code> and <code>LibraryTest.groovy</code> could be removed.</p>

<p>. Create main application class.
+
[source,groovy]
.ua.eshepelyuk.blog.Hello.groovy
—-
package ua.eshepelyuk.blog</p>

<h2 id="println-hello-from-docker-by-groovy-and-gradle-1">println “Hello from Docker by Groovy and Gradle” &lt;1&gt;</h2>
<p>&lt;1&gt; declaration of <code>public static void main</code> could be omitted in <code>Groovy</code></p>

<h1 id="note">[NOTE]</h1>
<p>Although <code>gradle init</code> generates https://docs.gradle.org/current/userguide/gradle_wrapper.html[Gradle wrapper] scripts, I won’t use them in this guide.
For real-life projects I’d suggest to use wrapper and don’t rely on local <code>Gradle</code> installation.
====</p>

<p>== Enable Docker support for project build script</p>

<p>When using <code>Gradle</code> you don’t need to deal with <code>Dockerfile</code> and other things for creating <code>Docker</code> image.
<em>There’re plugins for this :))</em></p>

<p>To enable and customize them just add some lines to <code>build.gradle</code> as described below.</p>

<p>Enable plugins::
+
[source,groovy]
.build.gradle
—-
plugins {
    id ‘groovy’
    id ‘application’ &lt;1&gt;
    id ‘com.bmuschko.docker-java-application’ version ‘2.6.1’ &lt;2&gt;
}
—-
&lt;1&gt; https://docs.gradle.org/current/userguide/application_plugin.html[Plugin] for building <em>runnable application</em> that can be embedded into <code>Docker</code> image
&lt;2&gt; https://github.com/bmuschko/gradle-docker-plugin[Docker support plugin]</p>

<p>Customize plugins::
+
[source,groovy]
.build.gradle
—-
mainClassName = ‘ua.eshepelyuk.blog.Hello’ &lt;1&gt;</p>

<p>docker {
    url = System.env.DOCKER_HOST.replaceAll(“tcp”, “https”) &lt;2&gt;
    javaApplication {
        tag = “eshepelyuk/hellodockergradle:latest” &lt;3&gt;
    }
}
—-
&lt;1&gt; Entry point for <code>application</code> plugin
&lt;2&gt; Fixing docker machine URL for Java API
&lt;3&gt; <code>Docker</code> image tag name</p>

<p>== Build image and run Docker container</p>

<h1 id="warning">[WARNING]</h1>
<p>Must run <code>start.sh</code> script from <code>Docker</code> for windows installation before proceed to further steps.
Please refer to http://eshepelyuk.github.io/2015/11/26/jvm-microservice-docker-windows.html[previous post] for details.
====</p>

<p>. Execute command to create <code>Docker</code> image.</p>

<p>$ gradle dockerBuildImage</p>

<p>. Check new image is available by running <code>docker image</code>.
Command output should include new image tagged with <code>eshepelyuk/hellodockergradle</code> (setting from <code>build.gradle</code>).
+
—-
$ docker images
REPOSITORY                        TAG                 IMAGE ID            CREATED                  VIRTUAL SIZE
..
eshepelyuk/hellodockergradle   latest              daa12bd8bb4f        About a minute ago   649 MB
..
—-</p>

<p>. Start container using <code>docker run</code> and inspect the output to match expected from <code>Hello.groovy</code> class.
+
—-
$ docker run eshepelyuk/hellodockergradle
Hello from Docker by Groovy and Gradle
—-</p>

<h1 id="note-1">[NOTE]</h1>
<p>Full project’s code is available at https://github.com/eshepelyuk/CodeForBlog/tree/master/HelloDockerGradle[My GitHub^]
====</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposing RESTful interface with Mule pt.2]]></title>
    <link href="http://blog.poznachowski.pl/2013/10/20/exposing-restful-interface-with-mule-pt2/"/>
    <updated>2013-10-20T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2013/10/20/exposing-restful-interface-with-mule-pt2</id>
    <content type="html"><![CDATA[<p>In <a href="/2013/10/11/exposing-restful-interface-with-mule-pt1/">previous part</a> of this article I’ve presented two ways of building REST API on Mule ESB: using Mule REST Module and handling HTTP properties manually.</p>

<p>This time I want to present achieving the same result using Mule <a href="http://www.mulesoft.org/documentation/display/current/REST+Component+Reference">Jersey Module</a> with addition of<br />
<a href="http://www.mulesoft.org/documentation/display/current/Component+Bindings">Component Bindings</a> - feature of Mule, which enables us to leave Java and go back to Mule flow processing.</p>

<p>Presented example was tested against Mule ESB 3.4.0 EE.</p>

<p><strong>3. Jersey REST</strong></p>

<p>Flow overview:<br />
<img src="/images/mulerest2/JerseyRestFlow.png">
<img src="/images/mulerest2/ProcessPostFlow.png">
<img src="/images/mulerest2/ProcessGetFlow.png"></p>

<p>Unfortunately, not much to see in this graphical overview - devil is in the details :)</p>

<p>Jersey REST Component is the official recommendation for exposing REST Services on Mule ESB. Usually, this reference implementation of JAX-RS would be everything we need to achieve the goal. However, in terms of Mule, it ties us heavily to Java code, which is not what we are especially looking for. To overcome this we can use Component Bindings.</p>

<p>Let’s go back to our example. Staring with the simple Jersey service class:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="annotation">@Path</span>(value = <span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span>)  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">JerseyRestService</span> {  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="directive">private</span> FlowProcessing flowProcessing;  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span class="annotation">@GET</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> <span class="annotation">@Path</span>(value = <span class="string"><span class="delimiter">&quot;</span><span class="content">/client/{accountID}/{userID}/get</span><span class="delimiter">&quot;</span></span>)  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> <span class="directive">public</span> Response processGET(<span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> accountId, <span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> userId) {  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="predefined-type">String</span> result = flowProcessing.processGET(accountId, userId);  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="keyword">return</span> Response.ok(result).build();  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> }  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> <span class="annotation">@POST</span>  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span> <span class="annotation">@Path</span>(value = <span class="string"><span class="delimiter">&quot;</span><span class="content">/client/{accountID}/{userID}/get</span><span class="delimiter">&quot;</span></span>)  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span> <span class="directive">public</span> Response processPOST(<span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> accountId, <span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> userId, <span class="predefined-type">String</span> body) {  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="predefined-type">String</span> result = flowProcessing.processPOST(accountId, userId, body);  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  <span class="keyword">return</span> Response.ok(result).build();  
<span class="line-numbers"><a href="#n18" name="n18">18</a></span> }  
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span> <span class="directive">public</span> <span class="type">void</span> setFlowProcessing(FlowProcessing flowProcessing) {  
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  <span class="local-variable">this</span>.flowProcessing = flowProcessing;  
<span class="line-numbers"><a href="#n22" name="n22">22</a></span> }  
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>}  
</pre></div>
</div>
</div>

<p>Nothing fancy here. JAX-RS plain and simple. Interesting part is the FlowProcessing interface. It looks like it’s wrapping whole business logic processing. By using Component Bindings we can make any Mule’s outbound endpoint behave as an implementation of that interface. Hence, we can make use of VM endpoints and move the processing from Java back to Mule flows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;jersey:resources</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">REST</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;component</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.JerseyRestService</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;binding</span> <span class="attribute-name">interface</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.FlowProcessing</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">method</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">processGET</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      <span class="tag">&lt;vm:outbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessGET</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;/binding&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;binding</span> <span class="attribute-name">interface</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.FlowProcessing</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">method</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">processPOST</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span class="tag">&lt;vm:outbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="tag">&lt;/binding&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;/component&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="tag">&lt;jersey:exception-mapper</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.BadURIExceptionMapper</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="tag">&lt;/jersey:resources&gt;</span>  
</pre></div>
</div>
</div>

<p>As seen above, everything we need to make it work is to provide binding element specifying the interface, interface’s method and outbound endpoint, which should be called. Few things to remember:</p>

<ul>
  <li>Don’t forget to write setter for the interface in the Jersey class. </li>
  <li>Make sure that request and response of the interface and endpoint matches </li>
  <li>It is possible to have the method return MuleMessage. It lets Java component have access to whole message, not only payload.</li>
</ul>

<p>Flows with the “business logic” for POST and GET methods processing are described below:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGetFlow</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGetFlow</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;vm:inbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">VM</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="tag">&lt;transformer</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Populate variables</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing GET with account id: #[accountID] and user id: #[userID]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="tag">&lt;/flow&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPostFlow</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPostFlow</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  <span class="tag">&lt;vm:inbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">VM</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="tag">&lt;transformer</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Populate variables</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing POST with account id: #[accountID] and user id: #[userID] and body: #[payload]</span><span class="delimiter">&quot;</span></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="tag">&lt;/flow&gt;</span>  
</pre></div>
</div>
</div>

<p>Input parameters of the FlowProcessing interface methods comes in the Mule flows as an Object array. We can map them into Mule parameters by writting and setting global transformer:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;custom-transformer</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.PopulateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Java</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
</div>
<p>and reusing it in the flows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;transformer</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
</div>

<p>PopulateVariables Java transformer:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">PopulateVariables</span> <span class="directive">extends</span> AbstractMessageTransformer {  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> <span class="annotation">@Override</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="directive">public</span> MuleMessage transformMessage(MuleMessage message, <span class="predefined-type">String</span> outputEncoding) <span class="directive">throws</span> <span class="exception">TransformerException</span> {  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="predefined-type">Object</span><span class="type">[]</span> args = message.getPayload(<span class="predefined-type">Object</span><span class="type">[]</span>.class);  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  message.setInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span>, args[<span class="integer">0</span>]);  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  message.setInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span>, args[<span class="integer">1</span>]);  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="comment">// For POST method  </span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">if</span> (args.length &gt; <span class="integer">2</span>) {  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>   message.setPayload(args[<span class="integer">2</span>]);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  }  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="keyword">return</span> message;  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span> }  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}  
</pre></div>
</div>
</div>

<p>We have everything in place to make it work. One thing I don’t like is that Jersey for requests with URL not met is returning 404 HTTP status (Not Found). I find 400 status (Bad Request) more appropriate in such case and I’d like to keep 404 reserved for situations where URL was met, but resource was not found. Satysfying that requirement is fairly simple. We need to add a custom exception mapper in Jersey definition:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;jersey:exception-mapper</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.BadURIExceptionMapper</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
</div>

<p>with implementation:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">BadURIExceptionMapper</span> <span class="directive">implements</span> ExceptionMapper&lt;NotFoundException&gt; {  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="directive">public</span> Response toResponse(NotFoundException exception){  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      <span class="keyword">return</span> Response.status(Response.Status.BAD_REQUEST).entity(<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown resource: </span><span class="delimiter">&quot;</span></span> + exception.getNotFoundUri().toString()).build();  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }  
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}  
</pre></div>
</div>
</div>

<p><strong>Note:</strong> It is possible to catch exceptions thrown in the binded outbound endpoints. To make that possible we just need to declare exception in binding interface method.</p>

<p>To test described solution I used the same set of tests as in previous post. However I was having problems testing successful scenarios using MUnit:</p>

<div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">ERROR 2013-10-17 22:30:02,434 [main] org.mule.exception.DefaultMessagingExceptionStrategy:</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">********************************************************************************</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">Message               : Failed to invoke JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Component that caused exception is: JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Message payload is of type: String</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">Code                  : MULE_ERROR--2</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">--------------------------------------------------------------------------------</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">Exception stack is:</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">1\. The required object/property "muleContext" is null (java.lang.IllegalArgumentException)</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">  org.mule.DefaultMuleMessage:292 (null)</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">2\. Failed to invoke JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Component that caused exception is: JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Message payload is of type: String (org.mule.component.ComponentException)</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">  org.mule.component.AbstractComponent:148 (http://www.mulesoft.org/docs/site/current3/apidocs/org/mule/component/ComponentException.html)</span></div>

</div>

<p>It seems that muleContext is not propagated correctly with MUnit and reflective proxy classes. Switching <a href="https://github.com/poznachowski/JerseyREST/blob/master/src/test/java/pl/poznachowski/jerseyrest/JerseyRESTTest.java">test class</a> to use ‘official’ FunctionalTestCase instead of MUnit worked like a charm.</p>

<p>Full example at GitHub: <a href="https://github.com/poznachowski/JerseyREST/">JerseyREST</a></p>

<p>That were all the solutions for exposing REST Services I can think of.<br />
In my work project, I’m using the REST Module and it’s doing its job well. Thus, if you want build REST API and use all of the nifty Mule features  I would suggest going with the Router Module.<br />
If you prefer to be more Java-centric, make use of Mule for handling integration matter only or to use Mule flows to a smaller extent then Jersey approach will fit in.</p>

<p>For more information about Component Bindings I encourage you to read Mule’s well-written <a href="http://blogs.mulesoft.org/mule-component-bindings/">blog post</a> explaining the feature.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposing RESTful interface with Mule pt.1]]></title>
    <link href="http://blog.poznachowski.pl/2013/10/11/exposing-restful-interface-with-mule-pt1/"/>
    <updated>2013-10-11T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2013/10/11/exposing-restful-interface-with-mule-pt1</id>
    <content type="html"><![CDATA[<p><strong>Update (20.10.2013)</strong> - When not supported HTTP method is used, return more appropriate HTTP status (405 instead of 400).</p>

<p>As it’s my first blog entry I’d like to welcome everyone. If you’d like to know more about me click on the tab above. If not.. I’ll go straight to the point.</p>

<p>Recently, I had to create Mule’s application, which exposes itself via a simple RESTful API. However, when it comes to REST, Mule ESB seems to be quite limited in viable options.<br />
The only, official approach is to use the <a href="http://www.mulesoft.org/documentation/display/current/REST+Component+Reference">REST Component</a>, which relies on <a href="https://jersey.java.net/">Jersey</a>, which is the Reference Implementation of JAX-RS. Sounds good, but it ties you to the Java code instead of having fun with the Mule’s message processing :) This can be overcome as well, but still some Java needs to be written.</p>

<p>Fortunately, there are some other possibilites, which would make simple REST API creation easier. Nevertheless, I’d like to present you all the options (of which I’m aware of) with description and a working example.</p>

<p>All presented examples were tested against Mule ESB 3.4.0 EE. However, they should run without any problems on CE and even on previous versions.</p>

<p><strong>1. “Poor man’s” REST:</strong></p>

<p>First approach is the most straightforward one - handling HTTP properties available in Mule manually. Quick overview over HTTP properties is available <a href="http://www.mulesoft.org/documentation/download/attachments/96633423/Archived_Mule_Developer_Notes_20130816.pdf?version=1&amp;modificationDate=1376677251871">here</a> - (1.4.7 Use Case) in archived Mule Developer Resources.</p>

<p>In that case, we need to take care of detecting the HTTP method, URL and fetching URL variable parameters by ourselves. We can accomplish that using Mule’s choice component and setting flow variables (if needed).<br />
An example will accept URL (on 8088 port) as follows: <strong>/client/{accountID}/{userID}/get</strong> on both <strong>GET</strong> and <strong>POST</strong> HTTP methods, where {accountID} and {userID} are the variable parameters.</p>

<p>General overview of the flow:<br />
<img src="/images/mulerest1/PoorMansRESTFlow.png"></p>

<p>First step is not necessary, but helpful for quick suppresion of favicon.ico requests when accesing service via browsers:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;message-filter</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Filter favicon</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;not-filter&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;wildcard-filter</span> <span class="attribute-name">casesensitive</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/favicon.ico</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/wildcard-filter&gt;</span><span class="tag">&lt;/not-filter&gt;</span>  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="tag">&lt;/message-filter&gt;</span>  
</pre></div>
</div>
</div>

<p>To match URL let’s use choice component with regular expression:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;choice</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Choice</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;when</span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[regex('/client/\\w+/\\w+/get/?', message.inboundProperties['http.request.path'])]</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>   ...  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="tag">&lt;/when&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;otherwise&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">400</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 400 For bad URL</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown resource: #[message.inboundProperties['http.request.path']]</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;/otherwise&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="tag">&lt;/choice&gt;</span>  
</pre></div>
</div>
</div>

<p>We retrieve URL path using Mule’s inbound property - ‘http.request.path’, then match it with the regexp ‘/client/\w+/\w+/get/?’. If we don’t have a match we just simply return 400 HTTP status.<br />
Otherwise, we can proceed and determine which HTTP method was used to send the request:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>  <span class="tag">&lt;when</span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">message.inboundProperties['http.method'] == 'GET'</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Retrieve Parameters</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process GET</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/when&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;when</span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">message.inboundProperties['http.method'] == 'POST'</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Retrieve Parameters</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process POST</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="tag">&lt;/when&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;otherwise&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">405</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 405 For bad HTTP method</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown HTTP method: #[message.inboundProperties['http.method']]</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span class="tag">&lt;/otherwise&gt;</span>  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="tag">&lt;/choice&gt;</span>  
</pre></div>
</div>
</div>

<p>This time we are checking another inbound parameter - ‘http.method’. If it’s not the method we want to proceed with, we return 405 HTTP status (Method Not Allowed).</p>

<p>For all supported methods we want to fetch the URL parameters. Hence, this functionality is extracted to a reusable sub-flow:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;sub-flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;set-variable</span> <span class="attribute-name">variableName</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[StringUtils.splitAndTrim(message.inboundProperties['http.request.path'], '/')[1]]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Account ID</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="tag">&lt;set-variable</span> <span class="attribute-name">variableName</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[StringUtils.splitAndTrim(message.inboundProperties['http.request.path'], '/')[2]]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set User ID</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="tag">&lt;/sub-flow&gt;</span>
</pre></div>
</div>
</div>

<p>As I’m not good at regular expressions, I decided to go with Mule’s StringUtils method, which splits the URL and gets me the parameters I’m looking for.</p>

<p>To avoid providing fully qualified name of the class over and over again, we can define global import for Mule expressions:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;configuration</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Configuration</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;expression-language&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;import</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">org.mule.util.StringUtils</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/expression-language&gt;</span>  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="tag">&lt;/configuration&gt;</span>  
</pre></div>
</div>
</div>

<p>That is basically everything we needed. We can now process GET / POST requests. For readability and maintainability reasons we will do that in separate flows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">200</span><span class="delimiter">&quot;</span></span><span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return OK</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing POST with account id: #[accountID] and user id: #[userID] and body: #[payload]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="tag">&lt;/flow&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">200</span><span class="delimiter">&quot;</span></span><span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return OK</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing GET with account id: #[accountID] and user id: #[userID]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="tag">&lt;/flow&gt;</span>
</pre></div>
</div>
</div>

<p>To test my service I’ve prepared a <a href="https://github.com/poznachowski/PoorMansREST/blob/master/src/test/java/pl/poznachowski/poormanrest/PoorMansRESTTest.java">test class</a> with couple of Mule functional tests. Instead of using default <a href="http://www.mulesoft.org/documentation/display/current/Functional+Testing">FunctionalTestCases</a>, I suggest using <a href="https://github.com/mulesoft/munit">MUnit</a>. From what I know, it is supposed to replace current Mule testing solution in future. With MUnit you can write your tests using Java (JUnit) or XML (Mule code). It has features like mocking endpoints, processors and ability to call flow directly, skipping inbound endpoints. However, development of MUnit seemed to slow down recently.<br />
To keep the test concise, I used <a href="https://code.google.com/p/junitparams/">JUnitParams</a> extension, as I wanted to use same test methods, but with different input (URLs).</p>

<p>Additionally, we could’ve checked for content-type etc., but I didn’t want to clutter the code with insignificant details.<br />
Having in mind next example, I’m not exactly sure, if anyone would opt for this approach. But still, there it is, probably for demonstration purposes only ;)</p>

<p>Full example at GitHub: <a href="https://github.com/Poznachowski/PoorMansREST">PoorMansREST</a></p>

<p><strong>2. REST Router</strong></p>

<p>To make our lives easier <a href="http://mulesoft.github.io/mule-module-rest-router/">Mule REST Router Module</a> has been developed. Code is available at <a href="https://github.com/mulesoft/mule-module-rest-router">GitHub</a>.<br />
Almost everything we did in previous approach is wrapped into one message processor. Installation and configuration is well explained in the links provided.</p>

<p>Flow overview:<br />
<img src="/images/mulerest1/RestWithRouterFlow.png"></p>

<p>Basically, to implement same behaviour, we need to configure rest-router as follows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;rest-router:router</span> <span class="attribute-name">templateUri</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/client/{accountID}/{userID}/get</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;rest-router:get&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process GET</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/rest-router:get&gt;</span>  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;rest-router:post&gt;</span>  
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process POST</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  <span class="tag">&lt;/rest-router:post&gt;</span>  
<span class="line-numbers"><a href="#n8" name="n8">8</a></span><span class="tag">&lt;/rest-router:router&gt;</span>  
</pre></div>
</div>
</div>

<p>REST Router automatically assign parameters specified in templateUri to flow variables. However, I found out that it passes through empty parameters, so it is advisable to validate them explicitly in your code.&lt;/div&gt;</p>

<p>Outstanding part is to cover invalid URLs and return something meaningful. For requests not matching our template we return standard 400 HTTP status (placed just after &lt;/rest-router:router&gt;) :</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">400</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 400 For bad URL</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown resource: #[message.inboundProperties['http.request.path']]</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="tag">&lt;/http:response-builder&gt;</span>  
</pre></div>
</div>
</div>

<p>For HTTP methods not supported REST Router should (per documentation) throw <a href="http://mulesoft.github.io/mule-module-rest-router/java/org/mule/modules/rest/UnsupportedHttpVerbException.html">UnsupportedHttpVerbException</a>. However, there is an issue I submitted <a href="https://github.com/mulesoft/mule-module-rest-router/issues/4">here</a>. Unfortunately, the project looks abandoned as nobody cared :) I did some more research and it appears that the issue is not in the REST Router itself, but how the <a href="http://www.mulesoft.org/documentation/display/current/Anypoint+Connector+DevKit+Guide">DevKit</a> java code is generated.<br />
There are two solutions for that:<br />
1) Always implement whole set of methods in REST Router and return appriopriate message / status / throw exception in those you don’t want to support.<br />
2) As I don’t like to have redundancy in my code I used a dirty hack of replacing compiled class with a fixed one directly in the jar file. Amended version of the module is available <a href="https://dl.dropboxusercontent.com/u/17262593/blog/mule-module-rest-router-fixed.zip">here</a>. Just install it in your local Maven repository and switch module version in your pom.xml file to 1.2-fixed.</p>

<p><strong>Fix description:</strong></p>

<p>HTTP method recognition is implemented as in the following snippet: (<strong>RestRouterModule.java</strong>)</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">if</span> (get != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">get</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="keyword">return</span> get.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (put != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">put</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="keyword">return</span> put.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (post != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">post</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span class="keyword">return</span> post.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (delete != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">delete</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> <span class="keyword">return</span> delete.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (patch != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">patch</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> <span class="keyword">return</span> patch.processWithExtraProperties(properties);  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>} <span class="keyword">else</span> {  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedHttpVerbException(method);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<p>Variables: get, put, post… are instances of NestedProcessor class, marked @Optional.<br />
However, code generated by DevKit always propagates those variables to the RestRouterModule as instances of NestedProcessorChain (<strong>RouterMessageProcessor.java</strong>):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">final</span> NestedProcessor _transformedGet = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) get));  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="directive">final</span> NestedProcessor _transformedPut = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) put));  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="directive">final</span> NestedProcessor _transformedPost = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) post));  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="directive">final</span> NestedProcessor _transformedDelete = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) delete));  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="directive">final</span> NestedProcessor _transformedPatch = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) patch));  
</pre></div>
</div>
</div>

<p>Those _transformed method variables are passed into the RestRouterModule class, hence it always tries to process the <strong>processWithExtraProperties(properties)</strong> method and eventually finishes with NullPointerException as the last argument in NestedProcessorChain contructor is null.</p>

<p>My fixed version of <strong>RouterMessageProcessor.java</strong> includes following change:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">final</span> NestedProcessor _transformedGet = (get == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) get));  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="directive">final</span> NestedProcessor _transformedPut = (put == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) put));  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="directive">final</span> NestedProcessor _transformedPost = (post == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) post));  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="directive">final</span> NestedProcessor _transformedDelete = (delete == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) delete));  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="directive">final</span> NestedProcessor _transformedPatch = (patch == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) patch));
</pre></div>
</div>
</div>

<p>Not much to explain here. Now, if a REST module HTTP method is not defined it will propagate null to <strong>RestRouterModule.java</strong> and throw UnsupportedHttpVerbException as expected.&lt;/div&gt;</p>

<p>In the flow we use standard choice exception strategy and catch the UnsupportedHttpVerbException to return 405 HTTP status:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;choice-exception-strategy</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Choice Exception Strategy</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>   <span class="tag">&lt;catch-exception-strategy</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Catch Exception Strategy</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">enablenotifications</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">when</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[exception.causedBy(UnsupportedHttpVerbException)]</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>       <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 405 For bad HTTP method</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">405</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown HTTP method: #[message.inboundProperties['http.method']]</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/set-payload&gt;</span><span class="tag">&lt;/http:response-builder&gt;</span> 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>   <span class="tag">&lt;/catch-exception-strategy&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="tag">&lt;/choice-exception-strategy&gt;</span>  
</pre></div>
</div>
</div>

<p>For testing I used the same set of tests as in previous example. As you can see, it’s much quicker and cleaner approach that saves you a lot of time and lines of code :)</p>

<p>Full example (using modified version of the module) at GitHub: <a href="https://github.com/poznachowski/RestWithRouter">RestWithRouter</a></p>

<p>In the next part I will present how to achieve the same, but using Jersey with writing as little Java as possible. Go <a href="http://poznachowski.blogspot.com/2013/10/exposing-restful-interface-with-mule-pt2.html">here</a> for the second part!&lt;/div&gt;</p>
]]></content>
  </entry>
  
</feed>
