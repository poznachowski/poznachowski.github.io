<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flow | It's SOAP's Fault...]]></title>
  <link href="http://blog.poznachowski.pl/categories/flow/atom.xml" rel="self"/>
  <link href="http://blog.poznachowski.pl/"/>
  <updated>2015-10-19T21:24:42+02:00</updated>
  <id>http://blog.poznachowski.pl/</id>
  <author>
    <name><![CDATA[Grzegorz Poznachowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MUnit testing, Mule best practices and more...]]></title>
    <link href="http://blog.poznachowski.pl/2014/04/03/munit-testing-mule-practices-and-some/"/>
    <updated>2014-04-03T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2014/04/03/munit-testing-mule-practices-and-some</id>
    <content type="html"><![CDATA[<p>Quite long time passed, since my last update. I hope that this post will successfully fill the resulting gap and you will find reading it worthwhile.</p>

<p><strong>Table of Content:</strong></p>

<ol>
  <li><a href="#a-little-bit-too-long-of-a-foreword">Foreword</a></li>
  <li><a href="#munit-introduction">MUnit introduction</a></li>
  <li><a href="#think-about-your-flow-design">Think about your flow design</a></li>
  <li><a href="#test-constants">Test constants</a></li>
  <li><a href="#assertions">Assertions</a></li>
  <li><a href="#munit-test-structure">MUnit test structure</a></li>
  <li><a href="#property-enricher">Property enricher</a></li>
  <li><a href="#execution-environments">Execution environments</a></li>
  <li><a href="#mocking">Mocking</a></li>
  <li><a href="#implementing-mocked-services">Implementing mocked services</a></li>
  <li><a href="#verifying--spying">Verifying &amp; spying</a></li>
  <li><a href="#summary">Summary</a></li>
</ol>

<ul>
  <li><a href="https://github.com/poznachowski/munit-utils">munit-utils@github</a></li>
  <li><a href="https://dl.dropboxusercontent.com/u/17262593/blog/munit-utils-0.0.1.zip">munit-utils-0.0.1.zip</a></li>
</ul>

<h2 id="a-little-bit-too-long-of-a-foreword">A little bit too long of a foreword…</h2>

<p>When I first met Mule there was that thing, that made me feel a little bit discouraged. There was only residual information about best practices on how to develop Mule applications and even less advice on how to effectively test them. All Mule examples provided here and there on the Internet are presented in a deploy-click-check if works manner. Next thing is that all demos are mostly simple, one-flow applications. Question about how to cope with larger, complex configurations was left unanswered.
I’ll try to shed some light on those subjects. For starters, there is some great writing by Ryan Hoegg available at <a href="http://confluex.com/blog/integration-software-is-software/">Confluex blog</a>. I’ll try to elaborate more on some topics brought up by Ryan, but focusing mainly on testing part using MUnit framework.
When talking about testing in Mule environment it is worth to emphasize that two types of tests exist here. Following the Mule documentation naming convention, first type are <a href="http://www.mulesoft.org/documentation/display/current/Unit+Testing">unit tests</a>, which cover your self-written message processors (transformers, components etc.) Mule’s current testing capabilities are more than enough to handle those cases pretty well. In terms of testing Groovy script components <a href="/2013/11/03/handling-groovy-scripts-in-mule-esb">here is something</a> I wrote previously.
The other are <a href="http://www.mulesoft.org/documentation/display/current/Functional+Testing">functional tests</a> - our main point of interest for this blog post.
I’d like to call them flow tests. Scope of these kinds of tests are pretty wide. How you approach them is up to you. You can test any given part of your application (depending on how you designed and structured your flows):</p>

<ul>
  <li>From testing integration between two adjacent message processors</li>
  <li>via business logic branches (capable of having mocked out any part of the process - external service calls, connections to DB, sending MQ messages etc.)</li>
  <li>to full system testing with all external services calls on board.</li>
</ul>

<p>Obviously, the best is to have mix of those, excluding the latter from your automated build test suite. We don’t want to call actual, external services each build, do we? <a href="http://stackoverflow.com/questions/2606572/junit-splitting-integration-test-and-unit-tests">Here</a> is an idea of how you can separate them.</p>

<p>For all that MUnit comes in handy…</p>

<h2 id="munit-introduction">MUnit introduction</h2>

<p><a href="https://github.com/mulesoft/munit">MUnit</a> is a next generation Mule testing framework. It is still under development, but its current state (3.4-M5) is more than enough to persuade me to use it in my work projects. In fact, I’m using it since the first day I discovered it, as the <a href="http://www.mulesoft.org/documentation/display/current/Introduction+to+Testing+Mule">current testing framework</a> lacks flexibility in my opinion.
Plenty of MUnit features are not easily available to the current, official version (i.e. mocking flows and outbound endpoints is cumbersome and requires a lot of effort). What’s more, MUnit comes in two flavours:</p>

<ul>
  <li>Well-known Java approach, where you write your tests as you would normally do (via JUnit).</li>
  <li>Mule XML code with MUnit schema.</li>
</ul>

<p>One thing needs mentioning. This blog post is strictly Java-centric, I won’t tell you anything about the XML way of writing MUnit tests. If that was not what you were looking for, I’m sorry to disappoint you.
The reason is simple - I’m not a fan of XML and the Java approach suits me much better. Nevertheless, everything MUnit can do with XML is possible using Java (and the other way round). That’s, at least, what specification states :) (I haven’t checked that).</p>

<p>MUnit is getting more recognizable lately (eventually it ought to replace current testing framework). Latest Mule (3.5 Early Access version) starts integrating MUnit with Studio heavily. More information about MUnit capabilities is available at project’s <a href="https://github.com/mulesoft/munit/wiki">wiki page</a>, but I’ll try to cover most of its powers here.</p>

<h2 id="think-about-your-flow-design">Think about your flow design</h2>

<p>I’ll try to outline some guidelines I now follow. They emerged from my  ~year Mule integration experience. Note: I can’t guarantee they will solve all your problems nor they will fit each of possible use cases. I’m just saying that they helped me survive some of the bad times I had. What’s even more important, I’m not even sure if they are the best I can get from my cooperation with Mule and Studio. If you have your own practices, questions, suggestions I’d like to hear them!</p>

<p>In the beginning I want to emphasize that Mule’s code it’s even easier to get messy with than with Java (at least for me). Hence, having good test coverage is crucial. How you design your flows implies the ease of testing them. What’s more, I really recommend to start your work flow in a TDD manner and let you flow design be guided by tests. From my experience, I can say, it pays off greatly later on.</p>

<p>Keep your flows short, make sure that each flow follows single responsibility principle. For complex solution split your configuration file (.xmls containing flows) into smaller ones. Think in functionality and business logic terms. I’m used to having one configuration file with main flow (with source component) controlling the whole process and others implementing bigger chunks of business logic (i.e. sending attachments with gathered information, fulfilling customer data) Of course each of these configuration files can contain many flows / subflows. Mule by <em>mule-deploy.properties</em> file (<em>config.resources</em> attribute) knows, which files comprise whole application set-up.</p>

<p>Let’s say we have a requirement to expose a service via HTTP endpoint, which needs to perform some complex validation logic (on HTTP Headers, Request Body etc.), then transform the provided data into a proprietary structure, backing it up with data coming from external REST Service. Eventually send a notification email to anyone who it may concern.
Example configuration can look like this:</p>

<h3 id="main-flowxml">main-flow.xml:</h3>

<p><img src="/images/munit/main-flow.png"></p>

<p>This main flow can accommodate whole application process into few single flow references, which can be easily read and understood. Every of the bigger, complex tasks was extracted to a different configuration file. With such structure we can execute end-to-end tests or test only main processing paths of full solution (when flow has choice components as presented) by mocking out all referenced implementations. To not litter the main flow, we extracted variables initialization part to a subflow. Those variables can be then used in processing data or sending email part.</p>

<h3 id="validate-requestxml-process-customer-dataxml-send-email-notificationxml">validate-request.xml, process-customer-data.xml, send-email-notification.xml:</h3>

<p><img src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F3.bp.blogspot.com%2F-ffPXPwmkuIg%2FUzm4vdjzh8I%2FAAAAAAAAESI%2FKSbK0a6w3JY%2Fs1600%2Fvalidate-request.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" alt="" /><img src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F2.bp.blogspot.com%2F-KhvkAdcVyDg%2FUzm4vWaLleI%2FAAAAAAAAESE%2Fz8Rk6OazIIc%2Fs1600%2Fprocess-customer-data.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" alt="" /><img src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F1.bp.blogspot.com%2F-ziYLEL3ykYQ%2FUzm4vVLE4AI%2FAAAAAAAAESM%2FmzUMHA0PbfY%2Fs1600%2Fsend-notification-email.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" alt="" /></p>

<p>Each of that configuration files is responsible for different phase of the solution. We can do the same with them if the flows would get bigger: split into more compact flows / subflows or even into another configuration files if necessary.</p>

<p>At some point in time, you may come up with the idea, that part of application should be extracted as separate Mule application. Keeping your flows modularized, makes this task relatively easy.
What’s also important (and it’s our subject) is that it allows us to test parts of the application in isolation. With MUnit you don’t need to have an inbound endpoint to call your flow. In fact, in MUnit you can access any flow directly (it disables all inbounds by default). You can test validation part by running your test against <em>ValidateHTTPRequest</em> flow or check if all variables were initialized properly by calling <em>InitializeVariables</em> subflow from within MUnit test.</p>

<p>Lastly, a word about flow ‘packaging’. Unfortunately Studio can’t accept the fact that I’d like to have my config files structured in subdirectories. The only appropriate place for them, according to Studio, is <em>src/main/app</em>. Whenever you try to put a flow config into a subfolder, Studio recreates it in ‘root’ directory..</p>

<h2 id="test-constants">Test constants</h2>
<p>You will be using variables in your tests. A lot! Flow names, variable names, configuration files to name a few. Keeping those names as interface constants gives you two advantages:
1. When renaming any variable, you don’t have to go through all tests and correct one by one - just rename once in the interface.
2. When you enable your interface class for static imports in Mule Studio, you can type those values in no-time using code completion assistance:</p>

<p><img src="/images/munit/test_constants_code_compl.png"></p>

<h2 id="assertions">Assertions</h2>

<p>To make sure that flows behave in the way we expect them to, there are two objects we are most interested in checking: <strong>MuleEvent</strong> and <strong>MuleMessage</strong>. These two are main targets for assertion expressions. MuleEvent is a basic entity which MUnit test returns as a result. it contains MuleMessage, attachments and session data.</p>

<p>I’m a big fan of fluent assertions, hence I strongly recommend giving them a try. <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> is the framework to look at. It’s a successor of <a href="https://github.com/alexruiz/fest-assert-2.x/wiki">Fest Assert</a>. Constantly under development, has plenty of contributors with a thriving community. Most valuable benefit of using AssertJ is the great number of assertion types and direct support from your IDE (code completion).</p>

<p>To ease work with Mule stuff, I’ve created small extension for AssertJ. It is available at my GitHub, <a href="https://github.com/poznachowski/munit-utils">here</a>. Right now it’s an early version, bound together with something I call property enricher (I’ll cover that later on). It covers presence of Mule Message properties (of different scopes), payload checks etc. Not everything’s included, but most common cases I encountered in my projects.
It’s not available in any public repository (yet?). You can build it yourself or get jar and sources from <a href="https://dl.dropboxusercontent.com/u/17262593/blog/munit-utils-0.0.1.zip">here</a>, then install them into your local maven repository <a href="http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html">manually</a> (or preferably into your artefact repository). Then you follow these instructions, common for every other AssertJ extension:</p>

<ol>
  <li>Add the library to your project</li>
  <li>Enable <strong>pl.poznachowski.mule.message.assertions.Assertions</strong> for static imports</li>
  <li>Start using:</li>
</ol>

<p><img src="/images/munit/assertThat.png">
<img src="/images/munit/assertThat2.png"></p>

<p>I think there is no need to go into details about available assertions. You can explore them on your own. Just one note here: When making assertions on <em>MuleEvent</em> object, make sure you ‘traverse down’ to asserting <em>MuleMessage</em> using <strong>hasMuleMessageWhich()</strong> method as the last check for <em>MuleEvent</em>, as you won’t be able to go back to it in the same assertion statement.</p>

<h2 id="munit-test-structure">MUnit test structure</h2>

<p>MUnit test does not differ much than the previous functional Mule test. Simplest example is presented below:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">package</span> <span class="namespace">pl.poznachowski.munitblogsamples</span>;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">import</span> <span class="include">static</span> <span class="include">pl.poznachowski.mule.message.assertions.Assertions.assertThat</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> <span class="include">static</span> <span class="include">pl.poznachowski.munitblogsamples.TestConstants.VALIDATE_REQUEST_FLOW</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="keyword">import</span> <span class="include">org.junit.Test</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">import</span> <span class="include">org.mule.api.MuleEvent</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">import</span> <span class="include">org.mule.munit.runner.functional.FunctionalMunitSuite</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="directive">public</span> <span class="type">class</span> <span class="class">FirstMunitTest</span> <span class="directive">extends</span> FunctionalMunitSuite {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> <span class="annotation">@Test</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> <span class="directive">public</span> <span class="type">void</span> simplestTest() <span class="directive">throws</span> <span class="exception">Exception</span> {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  MuleEvent result = runFlow(VALIDATE_REQUEST_FLOW, testEvent(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  assertThat(result)
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>   .hasMuleMessageWhich()
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>     .hasStringPayload(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span> }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>}
</pre></div>
</div>
</div>

<p>As you can see, it’s an ordinary JUnit test extending FunctionalMunitSuite class.
There are two thing we need to do in our test:</p>

<ol>
  <li>Prepare <strong>MuleEvent</strong> object as an input to our flow. We can do that by using provided <strong>testEvent(Object payload)</strong> method.</li>
  <li>Execute <strong>runFlow(String flowName, MuleEvent event)</strong> method specifying flow name to test against and event we just created in the first step.</li>
</ol>

<p>Of course, to make our test sensible, we need to assert whether the expected result is equal to what the flow actually produced as an output.</p>

<p>MUnit, by default, scans your <em>mule-deploy.properties</em> file and load all configuration files it can find there to perform the test. It’s rarely the case we’d like to have (except end-to-end testing). Main reason for avoiding that, is speed. We our tests to perform as fast as possible and there is no reason to include whole configuration when we are testing (i.e.) validation logic only. To accomplish that we need to override <strong><em>getConfigResources()</em></strong> method and provide configuration files, which should participate in a test:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">FirstMunitTest</span> <span class="directive">extends</span> FunctionalMunitSuite {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span> <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span> <span class="directive">protected</span> <span class="predefined-type">String</span> getConfigResources() {
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> Joiner.on(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>).join(MAIN_FLOW_CFG, VALIDATE_REQUEST_CFG);
<span class="line-numbers"><a href="#n6" name="n6">6</a></span> }
</pre></div>
</div>
</div>

<p>This method accepts String value with comma separated config file names. To produce such String I use Guava’s Joiner class. All configuration files names should, of course :), be set up as interface constants (i.e. MAIN_FLOW_CFG = “main-flow.xml”)</p>

<p>Another thing we need to know about MUnit is, that all inbound endpoints are skipped by default, meaning the process begin just right after when it would be intercepted by the source endpoint. However, it is still possible to use an inbound entry point for accessing flow in a test. There are two ways to achieve that:</p>

<ul>
  <li>Override <strong><a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-core/munit-runner/src/main/java/org/mule/munit/runner/functional/FunctionalMunitSuite.java#L107">haveToDisableInboundEndpoints()</a></strong> method and make it return <strong>false</strong>, or you can selectively pick flows which won’t have inbound endpoints disabled by:</li>
  <li>Overriding <strong><a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-core/munit-runner/src/main/java/org/mule/munit/runner/functional/FunctionalMunitSuite.java#L89"><span class="o" style="box-sizing: border-box;">getFlowsExcludedOfInbound</span>Disabling()</a></strong> method and providing list of String values with flows to exclude.</li>
</ul>

<p>If you enabled your inbound endpoints, then you can access your flows in the old way. Only thing you need to do is to obtain <strong>MuleClient</strong> from <strong>muleContext</strong>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>MuleClient client = muleContext.getClient();
</pre></div>
</div>
</div>

<p>and use the client instead of <strong>runFlow()</strong> method.</p>

<p>When working with custom connectors and mocking them out is not a desired behavior, there is a method you can use: <a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-core/munit-runner/src/main/java/org/mule/munit/runner/functional/FunctionalMunitSuite.java#L127"><strong>haveToMockMuleConnectors()</strong></a>. In that case, we want to override it and return false.
In terms of packaging, I’m used to keeping my Mule tests in packages named after flow names (then subpackage them if necessary), i.e. <em>pl.poznachowski.munit.example.mainflow</em></p>

<h2 id="property-enricher">Property enricher</h2>
<p>Properties are most widely used features of Mule. Hence, it won’t be uncommon to test part of application with <em>MuleMessage</em> already containing some Mule properties or to mock a message processor to modify them (alter / create / remove).
When creating <em>MuleEvent</em> for testing purposes you only can set payload using provided <strong>testEvent()</strong> method. To make working with properties easier I’ve introduced something I call property enricher. You can fluently apply any kind of property on either <strong>MuleEvent</strong> object or <strong>MuleMessage</strong>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="annotation">@Test</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">public</span> <span class="type">void</span> simplestTest() <span class="directive">throws</span> <span class="exception">Exception</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  MuleEvent testEvent = PropertyEnricher.enrich(testEvent(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>))
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>       .withInvocationProperty(SOME_VARIABLE, <span class="predefined-constant">true</span>)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>       .get();
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  MuleEvent result = runFlow(VALIDATE_REQUEST_FLOW, testEvent);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  assertThat(result)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>   .hasMuleMessageWhich()
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>   .hasStringPayload(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>   .hasInvocationProperty(SOME_VARIABLE).withValue(<span class="predefined-constant">true</span>);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>

<p>If you’d like to give it a try, it’s a part of the same utility project I described before - available <a href="https://github.com/poznachowski/munit-utils">here</a>.</p>

<h2 id="execution-environments">Execution environments</h2>
<p>I think it is always a good idea to parametrize any properties eligible to change between execution environments. This has been well explained in the Confluex blog post. Having prepared beforehand property files for each environment and then not to worry about it during deployment is something I really appreciate. But what if we want to make our flow behave differently between environments? It is also possible due to <em>spring:import</em> capability. Let me show you an example how we can roll it out.
Let’s say that we are exposing a flow through a HTTP/HTTPS endpoint. For functional testing we want to use standard HTTP, but for pre-production (and production of course) we need to work with HTTPS.
To accomplish that, instead of having our endpoint ‘hardcoded’ in the flow, we’ll use flow reference:</p>

<p><img src="/images/munit/MainFlow.png"></p>

<p>and set up spring import in the .xml config file:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;spring:beans&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;spring:import</span> <span class="attribute-name">resource</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">classpath:my-endpoint-${connection.type}.xml</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="tag">&lt;/spring:beans&gt;</span>
</pre></div>
</div>
</div>

<p>You shouldn’t care about Studio throwing errors. It is not a rare case, that Studio is complaining about something, which is perfectly ok for Mule ESB itself.
Don’t forget to have <strong>{connection.type}</strong> parameter set up in <strong>wrapper.conf</strong> of each of the Mule instances. Assume to expect only two possibilities here: secured / unsecured. Then we need to prepare two separate configuration files (located on the classpath): <strong>my-endpoint-secured.xml</strong> and <strong>my-endpoint-unsecured.xml</strong> and provide flow reference implementations (secured with HTTPS component, unsecured with HTTP). Remember about having same flow name as in the flow reference. After that, we’re done. Mule instance will pick appropriate setup, basing on the <strong><em>connection.type</em></strong> parameter provided.
One last thing we would need to remember about in terms of testing such constructs. MUnit need to know which HTTP type to test with. We can provide it by adding a system property in the getConfigResources() method:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span> <span class="directive">protected</span> <span class="predefined-type">String</span> getConfigResources() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="predefined-type">System</span>.setProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">connection.type</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">unsecured</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">main-flow.xml</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span> }
</pre></div>
</div>
</div>

<p>Of course those Strings should be extracted to constants, as you would use them a lot.</p>

<h2 id="mocking">Mocking</h2>

<p>It’s time to talk about crucial element of flows testing. In the beginning we need to realize that every component in Mule is a message processor (endpoint, flow reference etc). That makes MUnit powerful tool, as it has the ability to mock any of such things. Lets decompose mock expression into two parts:</p>

<ul>
  <li>Defining mock target</li>
</ul>

<p>You always starts your mock expression with <strong>whenMessageProcessor()</strong> fluent method. Required parameter is the processor name (XML tag name in Mule configuration file).
Then, if our processor is within a namespace we need to apply <strong>.ofNamespace()</strong> method to our mock.
Lastly, if there is more than one element with same name (i.e. flow, sub-flow, endpoints) we need to add <strong>.withAttributes()</strong> method, which takes <em>Map&lt;String,Object&gt;</em> or varargs <em>Attribute</em> as an argument. The latter is easy to create with a static helper structure available: <strong>attribute(String name).withValue(Object value)</strong></p>

<ul>
  <li>Defining mock behaviour</li>
</ul>

<p>When we’re done with target declaration we need to specify how our mock should behave. There are a couple of options here:</p>

<p><strong>.thenReturnSameEvent()</strong> - Means that message processor you mocked out will do nothing (outputs the same thing that came to the processor) during the flow processing.
<strong>.thenThrow(Throwable exception)</strong> - Mocked processor will throw specified exception.
<strong>.thenReturn(MuleMessage message)</strong> - This will return a MuleMessage object prepared beforehand. We can make use of available <strong>muleMessageWithPayload(Object payload)</strong> method to help ourselves here. Actually, I don’t use thenReturn() method much, as it’s not flexible enough. Especially when working with Mule properties and reusable flows.
<strong>.thenApply(MuleMessageTransformer transformer)</strong> - Most flexible method. Here we can prepare and use a Mule transformer, meaning we can do and return almost anything in our message (like quickly add properties using property enricher)</p>

<p>Example of flow mocking:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>whenMessageProcessor(<span class="string"><span class="delimiter">&quot;</span><span class="content">flow</span><span class="delimiter">&quot;</span></span>).withAttributes(attribute(<span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">ValidateHTTPRequest</span><span class="delimiter">&quot;</span></span>)).thenReturnSameEvent();
</pre></div>
</div>
</div>

<p>More examples can be seen <a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-integration-tests/src/test/java/org/mule/java/JavaMunitTest.java">here</a>. (note the contains() part when mocking sub-flows)</p>

<p>While it seems as a great and powerful feature, let me tell you when and why not to use mocking. Referring to our example we have a <em>MainFlow</em> which has several flow references. I want to mock out all those references, to make a simple test of the choice component, whether it routes properly (to send email or not). My first thought with that approach in mind, was to provide only <strong>main-flow.xml</strong> to my MUnit test (I want to have rest of flows mocked). Unfortunately, that’s not possible. Mule needs to set up all flows during start up, meaning it will fail saying that flow couldn’t be found. To overcome that, we would still need to provide all flow constructs (despite mocking), which implies greatly increased Mule start up time. (referenced flows can be complex, compound of even more flows / subflows). Not to mention configuration hassle (did I included all required flows?).
Of course we want our tests to perform as quick as possible. Solution for that is the way I was mocking flows before MUnit era. You need to create simple testing mock flows (with same flow names as in production code) and provide them in getConfigResources() method instead of the originals (<strong>src/test/resources</strong> is a great place to store them), but be careful! When you work with test flows, don’t use Mule Config Flow Editor. Otherwise, you would end up with duplicated tests flows in <strong>src/main/app</strong> folder. There’s a <a href="https://www.mulesoft.org/jira/browse/STUDIO-2285">JIRA ticket</a> for that. It now says it has been resolved in 3.5 Dolomite version. Not sure about the code names… but in my current Mule Studio (Version: 3.5.0 Build Id: 201402101410) it is still not working properly.</p>

<h2 id="implementing-mocked-services">Implementing mocked services</h2>
<p>It may sometimes be useful to simulate some more complex behavior of an external service in a form of a Mule mocked service implementation. We can accomplish that by combining everything we covered so far.
First thing would be to make sure that service outbound address parameters are externalized to a properties file and that property file is made environment specific (via system property - refer to earlier mentioned Confluex blog post). Then we need to code actual mock implementation in a test flow (address parameters can be any). We also need to create property file with mock service address (as it would be an another environment configuration set up).</p>

<p>To wrap everything together we need to set system property (in <strong>getConfigResources()</strong>) to a value we are using in a property file indicating mocked service address. Remember also of adding this mocked service flow to a collection of flows, which shouldn’t have their inbound endpoints disabled. Otherwise, your mocked service won’t be accessible at all.</p>

<p>I know that MUnit also offers FTP, Mail and DB servers that you can spawn on the fly in your tests. However, I didn’t try them out yet, so it’s better you check MUnit <a href="https://github.com/mulesoft/munit/wiki#integration-tests">wiki page</a> for more information on that.</p>

<h2 id="verifying--spying">Verifying &amp; spying</h2>

<p>There two other MUnit features worth mentioning:
Veryfing is a way to assert whether a message processor has been called during test execution. Its semantic is very similar to mocking. Instead of <em>whenMessageProcessor()</em> method we need to use <strong><em>verifyCallOfMessageProcessor()</em></strong> providing processor name with its identification details (if necessary: <em>ofNamespace()</em>, <em>withAttributes()</em>) and then using available assertion methods: <strong><em>.atLeastOnce()</em></strong>, .<strong><em>atLeast()</em></strong>, <em>.<strong>atMost()</strong></em>. Names are self-explanatory. With <strong><em>atLeast()</em></strong> and <em><strong>atMost()</strong></em> you need to provide integer value to make those assertions sensible.</p>

<p>Example validating that send email flow was called at least 2 times:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>verifyCallOfMessageProcessor(FLOW).withAttributes(attribute(NAME).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">SendNotificationEmail</span><span class="delimiter">&quot;</span></span>)).atLeast(<span class="integer">2</span>);
</pre></div>
</div>
</div>

<p>Spying can be used to validate assumptions before any given message processor starts processing or just right after. Again you start the same as with verifying and mocking, but with <strong>spyMessageProcessor()</strong> method. When the target is acquired you can use <strong>.before()</strong> and <strong>.after()</strong> method passing any number of <strong>SpyProcess</strong> instances as an argument.
<strong>SpyProcess</strong> is an interface with one method signature: <strong>void spy(MuleEvent event)</strong>. In that method implementation you can perform your assertions and check the payload in before or after phase.</p>

<p>Example checking variable presence and value, before and after using set-variable component:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>spyMessageProcessor(<span class="string"><span class="delimiter">&quot;</span><span class="content">set-variable</span><span class="delimiter">&quot;</span></span>).withAttributes(attribute(<span class="string"><span class="delimiter">&quot;</span><span class="content">variableName</span><span class="delimiter">&quot;</span></span>).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>))
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  .before(<span class="keyword">new</span> SpyProcess() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>   <span class="annotation">@Override</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>   <span class="directive">public</span> <span class="type">void</span> spy(MuleEvent beforeEvent) <span class="directive">throws</span> MuleException {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    assertThat(beforeEvent)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>     .hasMuleMessageWhich()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      .hasInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>).notSet();
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>   }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  })
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  .after(<span class="keyword">new</span> SpyProcess() {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>   <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>   <span class="directive">public</span> <span class="type">void</span> spy(MuleEvent afterEvent) <span class="directive">throws</span> MuleException {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    assertThat(afterEvent)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>     .hasMuleMessageWhich()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      .hasInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">hello</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>   }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  });
</pre></div>
</div>
</div>

<h2 id="summary">Summary</h2>
<p>That would be about everything I could come up with. If you have any questions, suggestions please let me know. Lastly, two ‘pro’ :) tips:</p>

<ul>
  <li>do not commit any .flow files (they are required for Studio only, and are being generated from corresponding .xml)</li>
  <li>good log4j configuration can save you a lot of time and trouble!</li>
</ul>
]]></content>
  </entry>
  
</feed>
