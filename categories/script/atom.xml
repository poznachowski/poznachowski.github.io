<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: script | It's SOAP's Fault...]]></title>
  <link href="http://blog.poznachowski.pl/categories/script/atom.xml" rel="self"/>
  <link href="http://blog.poznachowski.pl/"/>
  <updated>2016-04-01T15:51:22+02:00</updated>
  <id>http://blog.poznachowski.pl/</id>
  <author>
    <name><![CDATA[Grzegorz Poznachowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling Groovy scripts in Mule ESB]]></title>
    <link href="http://blog.poznachowski.pl/2013/11/03/handling-groovy-scripts-in-mule-esb/"/>
    <updated>2013-11-03T00:00:00+01:00</updated>
    <id>http://blog.poznachowski.pl/2013/11/03/handling-groovy-scripts-in-mule-esb</id>
    <content type="html"><![CDATA[<p>In my work project we had to make plenty of XML manipulations on some complex structures. As Mule supports Groovy (<a href="http://groovy.codehaus.org/Scripts+and+Classes">scripts</a>) natively, we decided to make use of Groovy’s <a href="http://groovy.codehaus.org/Processing+XML">XMLSlurper</a>.
Two things I wanted to have covered, before I begin: How to easily handle those scripts in Mule Studio and how to unit test them.</p>

<p><strong>1. Groovy scripts in Mule Studio</strong></p>

<p>Mule, when it comes to <a href="http://www.mulesoft.org/documentation/display/current/Groovy+Component+Reference">Groovy components</a>, can embed script code inside the Mule configuration file or use an external script file. Of course, at all times, I don’t want to clutter my Mule code with embedded scripts. The only exception I make, is when I need to do something simple and I’m unable to use Mule Expression Language to achieve that (i.e. throwing an exception directly from flow - <a href="https://www.mulesoft.org/jira/browse/MULE-6624">JIRA</a>).</p>

<p>First thing I did was installation of Groovy plugin for the IDE. Latest Mule Studio version is 3.5.0, which is based on Eclipse 3.8. Update site URL for the plugin is: <a href="http://dist.springsource.org/release/GRECLIPSE/e4.2/">http://dist.springsource.org/release/GRECLIPSE/e4.2/</a>. My example project was built on Mule ESB 3.4.0. It uses Groovy 1.8.6, hence we have to add an extra Groovy compiler when installing plugin and we have to switch it on in Groovy preferences afterwards.</p>

<p>Next, we need to think about where to locate our scripts. There are several possibilities, but I find most convinient to put them in <strong>src/main/scripts</strong> in a subfolder named as a Mule configuration file, which uses it. Then, we need to force IDE to be as useful as possible, especially the m2e plugin built in Mule Studio. I always work on Maven-supported Mule projects and strongly recommend to do the same.</p>

<ul>
  <li>Enable Groovy scripts folders in Groovy preferences and add <strong>src/main/scripts</strong> and <strong>src/test/scripts</strong> patterns (note that Compiler version is already set to 1.8.6):</li>
</ul>

<p><img src="/images/mulegroovy/groovy_settings.png"></p>

<ul>
  <li>Now we need to make sure that Maven will put those scripts in proper location. Ideal for me, is to put them in <strong>classes/scripts</strong> directory. It will cause nice separation with other project resources. Achieving that appeared to be simple. In <strong>pom.xml</strong> specify resources in the <strong>&lt;build&gt;</strong> part:</li>
</ul>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;build&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;resources&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="tag">&lt;resource&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="tag">&lt;directory&gt;</span>src/main/resources<span class="tag">&lt;/directory&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="tag">&lt;/resource&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="tag">&lt;resource&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="tag">&lt;directory&gt;</span>src/main/scripts<span class="tag">&lt;/directory&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="tag">&lt;targetPath&gt;</span>scripts<span class="tag">&lt;/targetPath&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="tag">&lt;/resource&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="tag">&lt;/resources&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    ...
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="tag">&lt;/build&gt;</span>
</pre></div>
</div>
</div>

<p>Maven’s build <strong>&lt;resources/&gt;</strong> element is described <a href="http://maven.apache.org/pom.html#Resources">here</a>. When doing research about the above I found out something interesting. With the default structure of pom.xml file generated by Mule Studio, all Mule configuration files are duplicated in the built zip file. Sample Mule application structure generated by Maven would look like:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span> \- classes
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  \- mule-config.xml
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  |- mule-deploy.properties
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |- mule-app.properties
<span class="line-numbers"><a href="#n5" name="n5">5</a></span> |- lib
<span class="line-numbers"><a href="#n6" name="n6">6</a></span> |- mule-config.xml
<span class="line-numbers"><a href="#n7" name="n7">7</a></span> |- mule-deploy.properties
<span class="line-numbers"><a href="#n8" name="n8">8</a></span> |- mule-app.properties
</pre></div>
</div>
</div>

<p>Files (<strong>2,3,4</strong>) are redundant (per Mule’s application format <a href="http://www.mulesoft.org/documentation/display/current/Application+Format">reference</a>). Responsible for that mess is <strong>Build Helper Maven Plugin</strong>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;plugin&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;groupId&gt;</span>org.codehaus.mojo<span class="tag">&lt;/groupId&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;artifactId&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/artifactId&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="tag">&lt;version&gt;</span>1.7<span class="tag">&lt;/version&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;executions&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="tag">&lt;execution&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="tag">&lt;id&gt;</span>add-resource<span class="tag">&lt;/id&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="tag">&lt;phase&gt;</span>generate-resources<span class="tag">&lt;/phase&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="tag">&lt;goals&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                <span class="tag">&lt;goal&gt;</span>add-resource<span class="tag">&lt;/goal&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="tag">&lt;/goals&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="tag">&lt;resources&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    <span class="tag">&lt;resource&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                        <span class="tag">&lt;directory&gt;</span>src/main/app/<span class="tag">&lt;/directory&gt;</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                    <span class="tag">&lt;/resource&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="tag">&lt;/resources&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="tag">&lt;/configuration&gt;</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span class="tag">&lt;/execution&gt;</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="tag">&lt;/executions&gt;</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="tag">&lt;/plugin&gt;</span>
</pre></div>
</div>
</div>

<p>If I remove that plugin part, everything still seems to be working perfectly fine and my project’s output structure is neat and clean:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span> \- classes
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  \- scripts
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>   \- GroovyScriptTesting
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    \- CalculateSquareNumber.groovy
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |- log4j.properties
<span class="line-numbers"><a href="#n6" name="n6">6</a></span> |- GroovyScriptTesting.xml
<span class="line-numbers"><a href="#n7" name="n7">7</a></span> |- mule-deploy.properties
<span class="line-numbers"><a href="#n8" name="n8">8</a></span> |- mule-app.properties
</pre></div>
</div>
</div>

<p>It looks like <strong>maven-mule-plugin</strong> is doing all the necessary work for <strong>src/main/app</strong> folder. So, if you know why the build helper plugin is set up in the pom.xml in the first place or if you’re having any problem without it, please let me know.
In the end, with everything in place, my project in Mule Studio should look like this:</p>

<p><img src="/images/mulegroovy/groovy_project_setup.png"></p>

<p>and we are ready to go to the second part.</p>

<p><strong>2. Unit testing Groovy scripts</strong></p>

<p>Mule provide direct access to Mule context objects and variables in Groovy scripts the same way as it does for MEL. In terms of testing, it’s important to decide and be consequent about how we are accessing Mule variables:
If I’m sure that the variable will be defined during script execution, I access them directly (as ‘number’ in the example):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">def</span> square = number.toInteger() * number.toInteger()
</pre></div>
</div>
</div>

<p>If it’s possible that the variable won’t be set up (can be a part of the script logic - to check for variable presence), then I would try to get it from the message context (it’s always available):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">def</span> number = message.getInvocationProperty(<span class="string"><span class="delimiter">'</span><span class="content">number</span><span class="delimiter">'</span></span>)
</pre></div>
</div>
</div>

<p>and then do some null checks etc. Otherwise, I would get Groovy’s <strong>MissingPropertyException</strong>.
Setting variables via scripts always needs to happen using message.setProperty method.</p>

<p>Let’s look at this simple Groovy script (<strong>CalculateSquareNumber.groovy</strong>):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">def</span> square = number.toInteger() * number.toInteger()
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>message.setInvocationProperty(<span class="string"><span class="delimiter">'</span><span class="content">squareNumber</span><span class="delimiter">'</span></span>, square)
</pre></div>
</div>
</div>

<p>and it’s unit test (<strong>CalculateSquareNumberTest.java</strong>):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="annotation">@RunWith</span>(JUnitParamsRunner.class)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">CalculateSquareNumberTest</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">String</span> PAYLOAD = <span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="annotation">@Test</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="annotation">@Parameters</span>(method = <span class="string"><span class="delimiter">&quot;</span><span class="content">numbersAndSquares</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="directive">public</span> <span class="type">void</span> test(<span class="type">int</span> number, <span class="type">int</span> square) <span class="directive">throws</span> <span class="exception">Exception</span> {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="predefined-type">Binding</span> binding = <span class="keyword">new</span> <span class="predefined-type">Binding</span>();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        binding.setVariable(<span class="string"><span class="delimiter">&quot;</span><span class="content">number</span><span class="delimiter">&quot;</span></span>, number);
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        binding.setVariable(<span class="string"><span class="delimiter">&quot;</span><span class="content">message</span><span class="delimiter">&quot;</span></span>, TestMuleMessage.withPayload(PAYLOAD));
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        GroovyShell shell = <span class="keyword">new</span> GroovyShell(binding);
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        shell.evaluate(getFile(<span class="string"><span class="delimiter">&quot;</span><span class="content">/scripts/GroovyScriptTesting/CalculateSquareNumber.groovy</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        MuleMessage message = (MuleMessage) binding.getVariable(<span class="string"><span class="delimiter">&quot;</span><span class="content">message</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        assertThat((<span class="predefined-type">Integer</span>)message.getInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">squareNumber</span><span class="delimiter">&quot;</span></span>), is(square));
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="annotation">@SuppressWarnings</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">unused</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="directive">private</span> <span class="predefined-type">Object</span><span class="type">[]</span> numbersAndSquares() {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="keyword">return</span> <span class="error">$</span>(
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>             <span class="error">$</span>(<span class="integer">3</span>, <span class="integer">9</span>),
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>             <span class="error">$</span>(<span class="integer">5</span>, <span class="integer">25</span>),
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>             <span class="error">$</span>(<span class="integer">10</span>, <span class="integer">100</span>),
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>             <span class="error">$</span>(<span class="integer">12</span>, <span class="integer">144</span>)
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        );
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="directive">private</span> <span class="predefined-type">File</span> getFile(<span class="predefined-type">String</span> pathToFile) <span class="directive">throws</span> <span class="exception">URISyntaxException</span>, <span class="exception">FileNotFoundException</span> {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="predefined-type">URL</span> url = CalculateSquareNumberTest.class.getResource(pathToFile);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">if</span> (url == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">FileNotFoundException</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">Couldn't find: </span><span class="delimiter">&quot;</span></span> + pathToFile);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="keyword">return</span> <span class="keyword">new</span> <span class="predefined-type">File</span>(url.toURI());
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>}
</pre></div>
</div>
</div>

<p>To evaluate Groovy scripts in our test we need to use <a href="http://groovy.codehaus.org/api/groovy/lang/GroovyShell.html">GroovyShell</a> along with <a href="http://groovy.codehaus.org/api/groovy/lang/Binding.html">Binding</a>’s setVariable() method to make variables available. As you can see it’s pretty easy, the trickier part is how to pass proper MuleMessage instance to our test. To do that, I have prepared helper <strong>TestMuleMessage</strong> class, which is preparing message with default Mule context:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">TestMuleMessage</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">public</span> <span class="directive">static</span> MuleMessage withPayload(<span class="predefined-type">Object</span> payload) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        MuleContextFactory contextFactory = <span class="keyword">new</span> DefaultMuleContextFactory();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        MuleContext muleContext = <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">try</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            muleContext = contextFactory.createMuleContext();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        } <span class="keyword">catch</span> (InitialisationException e) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            e.printStackTrace();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        } <span class="keyword">catch</span> (<span class="exception">ConfigurationException</span> e) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            e.printStackTrace();
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="keyword">return</span> <span class="keyword">new</span> DefaultMuleMessage(payload, muleContext);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<p>Another useful thing in the test is the helper <strong>getFile()</strong> method which retrieves script file not from hardcoded full path, but from classpath instead, which is always a better idea. Usually, you would put it in some test util class.
Your main target for assertions is <strong>MuleMessage</strong> object, which can be retrieved using Binding <strong>getVariable</strong>() method. There you can check for variables’ values or message payload itself.
As you can see, keeping few simple rules, can make work with Groovy scripts (in Mule) a pleasant, easily testable experience. Sample project, I prepared, is using Quartz endpoint and Groovy script to count and display square number of number 5 :) It is available <a href="https://github.com/poznachowski/GroovyScriptTesting">here</a>.</p>
]]></content>
  </entry>
  
</feed>
