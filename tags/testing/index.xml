<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on It&#39;s SOAP&#39;s Fault...</title>
    <link>https://blog.poznachowski.pl/tags/testing/</link>
    <description>Recent content in testing on It&#39;s SOAP&#39;s Fault...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.poznachowski.pl/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>@MockBean - Spring Boot&#39;s missing ingredient</title>
      <link>https://blog.poznachowski.pl/posts/mockbean-spring-boot-missing-ingredient/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poznachowski.pl/posts/mockbean-spring-boot-missing-ingredient/</guid>
      <description>I really liked the Spring Boot&amp;#8217;s concept, since I first saw it. The only thing, I felt, it was missing was a better support for testing in general.
 The problem It all started, when I wanted to have a way to test &#39;current date&#39; logic in my application. It was supposed to be a reusable, easy-to-use feature (via an annotation) in a custom Spring Boot Starter. The starter is based on Java 8, hence JSR-310 Date / Time API is a natural pick.</description>
    </item>
    
    <item>
      <title>MUnit testing, Mule best practices and more...</title>
      <link>https://blog.poznachowski.pl/posts/munit-testing-mule-practices-and-some/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poznachowski.pl/posts/munit-testing-mule-practices-and-some/</guid>
      <description>Quite long time passed, since my last update. I hope that this post will successfully fill the resulting gap and you will find reading it worthwhile.
Table of Content:
 Foreword MUnit introduction Think about your flow design Test constants Assertions MUnit test structure Property enricher Execution environments Mocking Implementing mocked services Verifying &amp;amp; spying Summary   munit-utils@github munit-utils-0.0.1.zip  A little bit too long of a foreword&amp;hellip; When I first met Mule there was that thing, that made me feel a little bit discouraged.</description>
    </item>
    
    <item>
      <title>Handling Groovy scripts in Mule ESB</title>
      <link>https://blog.poznachowski.pl/posts/handling-groovy-scripts-in-mule-esb/</link>
      <pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poznachowski.pl/posts/handling-groovy-scripts-in-mule-esb/</guid>
      <description>In my work project we had to make plenty of XML manipulations on some complex structures. As Mule supports Groovy (scripts) natively, we decided to make use of Groovy&amp;rsquo;s XMLSlurper. Two things I wanted to have covered, before I begin: How to easily handle those scripts in Mule Studio and how to unit test them.
1. Groovy scripts in Mule Studio
Mule, when it comes to Groovy components, can embed script code inside the Mule configuration file or use an external script file.</description>
    </item>
    
  </channel>
</rss>