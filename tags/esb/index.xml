<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>esb on It&#39;s SOAP&#39;s Fault...</title>
    <link>https://blog.poznachowski.pl/tags/esb/</link>
    <description>Recent content in esb on It&#39;s SOAP&#39;s Fault...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.poznachowski.pl/tags/esb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MUnit testing, Mule best practices and more...</title>
      <link>https://blog.poznachowski.pl/posts/munit-testing-mule-practices-and-some/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poznachowski.pl/posts/munit-testing-mule-practices-and-some/</guid>
      <description>Quite long time passed, since my last update. I hope that this post will successfully fill the resulting gap and you will find reading it worthwhile.
Table of Content:
 Foreword MUnit introduction Think about your flow design Test constants Assertions MUnit test structure Property enricher Execution environments Mocking Implementing mocked services Verifying &amp;amp; spying Summary   munit-utils@github munit-utils-0.0.1.zip  A little bit too long of a foreword&amp;hellip; When I first met Mule there was that thing, that made me feel a little bit discouraged.</description>
    </item>
    
    <item>
      <title>Handling Groovy scripts in Mule ESB</title>
      <link>https://blog.poznachowski.pl/posts/handling-groovy-scripts-in-mule-esb/</link>
      <pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poznachowski.pl/posts/handling-groovy-scripts-in-mule-esb/</guid>
      <description>In my work project we had to make plenty of XML manipulations on some complex structures. As Mule supports Groovy (scripts) natively, we decided to make use of Groovy&amp;rsquo;s XMLSlurper. Two things I wanted to have covered, before I begin: How to easily handle those scripts in Mule Studio and how to unit test them.
1. Groovy scripts in Mule Studio
Mule, when it comes to Groovy components, can embed script code inside the Mule configuration file or use an external script file.</description>
    </item>
    
    <item>
      <title>Exposing RESTful interface with Mule pt.2</title>
      <link>https://blog.poznachowski.pl/posts/exposing-restful-interface-with-mule-pt2/</link>
      <pubDate>Sun, 20 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poznachowski.pl/posts/exposing-restful-interface-with-mule-pt2/</guid>
      <description>In previous part of this article I&amp;rsquo;ve presented two ways of building REST API on Mule ESB: using Mule REST Module and handling HTTP properties manually.
This time I want to present achieving the same result using Mule Jersey Module with addition of
Component BindingsÂ - feature of Mule, which enables us to leave Java and go back to Mule flow processing.
Presented example was tested against Mule ESB 3.4.0 EE.</description>
    </item>
    
    <item>
      <title>Exposing RESTful interface with Mule pt.1</title>
      <link>https://blog.poznachowski.pl/posts/exposing-restful-interface-with-mule-pt1/</link>
      <pubDate>Fri, 11 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poznachowski.pl/posts/exposing-restful-interface-with-mule-pt1/</guid>
      <description>Update (20.10.2013) - When not supported HTTP method is used, return more appropriate HTTP status (405 instead of 400).
As it&amp;rsquo;s my first blog entry I&amp;rsquo;d like to welcome everyone. If you&amp;rsquo;d like to know more about me click on the tab above. If not.. I&amp;rsquo;ll go straight to the point.
Recently, I had to create Mule&amp;rsquo;s application, which exposes itself via a simple RESTful API. However, when it comes to REST, Mule ESB seems to be quite limited in viable options.</description>
    </item>
    
  </channel>
</rss>