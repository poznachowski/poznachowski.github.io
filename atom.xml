<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[It's SOAP's Fault...]]></title>
  <link href="http://blog.poznachowski.pl/atom.xml" rel="self"/>
  <link href="http://blog.poznachowski.pl/"/>
  <updated>2016-04-01T18:10:10+02:00</updated>
  <id>http://blog.poznachowski.pl/</id>
  <author>
    <name><![CDATA[Grzegorz Poznachowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get along with your Spring Boot Starter]]></title>
    <link href="http://blog.poznachowski.pl/2016/04/01/get-along-with-your-spring-boot-starter/"/>
    <updated>2016-04-01T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2016/04/01/get-along-with-your-spring-boot-starter</id>
    <content type="html"><![CDATA[<div class="paragraph lead">
<p>At <a href="http://neoteric.eu">Neoteric</a> we have finally decided
to move forward with our technology stack. From custom-tailored mix-up of Jetty, Jersey, Guava and
Jackson (it all started before <a href="http://dropwizard.github.io">Dropwizard</a> came along), going through different versions of
these (during our journey we migrated from Jersey 1.x to 2.x, Jackson 1.x to 2.x, Guava 3.0 to 4.0 etc.), we&#8217;ve reached
to the <a href="http://spring.io">Spring</a> island and we are currently learning language of the autochthons.</p>
</div>
<div class="paragraph">
<p>We have picked Spring ecosystem as its most widely known Java solution, with great community support. But, most importantly,
because we fell in love with <a href="http://projects.spring.io/spring-boot/">Spring Boot</a> and
<a href="http://projects.spring.io/spring-cloud/">Spring Cloud</a> capabilities.</p>
</div>
<div class="sect2">
<h3 id="spring-boot-magic">Spring Boot magic</h3>
<div class="paragraph">
<p>There is so much hype on Spring Boot lately and so many Spring Boot articles, presentations etc., that I want to focus
only on essential parts - required to understand how to write your own starter.</p>
</div>
<div class="paragraph">
<p>The whole 'magic', as often expressed when explaining Spring Boot, mostly boils down to scanning application classpath for particular classes
available and providing preconfigured <code>Beans</code> for them. Treat it as a convention over configuration concept applied to the application level.
I think that, best way to understand it is to learn by example. Hence, let&#8217;s summon and examine Spring Boot&#8217;s <code>MongoAutoConfiguration</code> class.</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java">MongoAutoConfiguration.java</a></div>
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Configuration</span> <i class="conum" data-value="1"></i><b>(1)</b>
<span class="annotation">@ConditionalOnClass</span>(MongoClient.class) <i class="conum" data-value="2"></i><b>(2)</b>
<span class="annotation">@EnableConfigurationProperties</span>(MongoProperties.class) <i class="conum" data-value="3"></i><b>(3)</b>
<span class="annotation">@ConditionalOnMissingBean</span>(type = <span class="string"><span class="delimiter">&quot;</span><span class="content">org.springframework.data.mongodb.MongoDbFactory</span><span class="delimiter">&quot;</span></span>) <i class="conum" data-value="4"></i><b>(4)</b>
<span class="directive">public</span> <span class="type">class</span> <span class="class">MongoAutoConfiguration</span> {

        <span class="annotation">@Autowired</span> <i class="conum" data-value="5"></i><b>(5)</b>
        <span class="directive">private</span> MongoProperties properties;

        <span class="annotation">@Autowired</span>(required = <span class="predefined-constant">false</span>)
        <span class="directive">private</span> MongoClientOptions options;

        <span class="annotation">@Autowired</span>
        <span class="directive">private</span> Environment environment;

        <span class="directive">private</span> MongoClient mongo;

        <span class="annotation">@PreDestroy</span>
        <span class="directive">public</span> <span class="type">void</span> close() {
                <span class="keyword">if</span> (<span class="local-variable">this</span>.mongo != <span class="predefined-constant">null</span>) {
                        <span class="local-variable">this</span>.mongo.close();
                }
        }

        <span class="annotation">@Bean</span>
        <span class="annotation">@ConditionalOnMissingBean</span> <i class="conum" data-value="6"></i><b>(6)</b>
        <span class="directive">public</span> MongoClient mongo() <span class="directive">throws</span> <span class="exception">UnknownHostException</span> {
                <span class="local-variable">this</span>.mongo = <span class="local-variable">this</span>.properties.createMongoClient(<span class="local-variable">this</span>.options, <span class="local-variable">this</span>.environment);
                <span class="keyword">return</span> <span class="local-variable">this</span>.mongo;
        }

}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Standard Spring <code>@Configuration</code> annotation. What it makes an auto-configuration class is an entry in
<code><a href="#spring.factories">META-INF/spring.factories</a></code> file.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>One of the Conditional type annotations. This one means that the <code>MongoAutoConfiguration</code> class will be processed only
if <code>MongoClient</code> class is available on classpath in runtime.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Registers a properties class, so it can be used in the auto-configuration. More on this here.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Another condition, which has to be met, to start processing the class.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Auto-configuration class is a standard Spring configuration class, hence ability to inject beans is quite obvious.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>If you put <code>@ConditionalOnMissingBean</code> directly on a bean declaration, bean type will be inferred.</td>
</tr>
</table>
</div>
<div id="spring.factories" class="listingblock">
<div class="title">META-INF/spring.factories</div>
<div class="content">
<pre class="CodeRay highlight"><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration</code></pre>
</div>
</div>
<div class="paragraph">
<p>To sum up: <code>MongoAutoConfiguration</code> will be performed when <code>MongoClient</code> class is available at runtime
(happens when <code>mongo-java-driver</code> dependency is added) and if no <code>Bean</code> of type <code>MongoDbFactory</code> is found.
The latter implies, that you can define <code>Bean</code> of such type in your application and handle MongoDB scaffolding yourself.
In that case <code>MongoAutoConfiguration</code> will be ignored by Spring Boot. In our example, MongoDB set up is moved into
property class itself: <code>this.properties.createMongoClient(this.options, this.environment);</code></p>
</div>
<div class="paragraph">
<p>There are some more annotation elements that may be helpful designing your starter:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 1. Conditional annotations</caption>
<colgroup>
<col style="width: 33%;">
<col style="width: 66%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Annotation</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnClass.java"><code>@ConditionalOnClass</code></a> / <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingClass.java"><code>@ConditionalOnMissingClass</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches when specified classes are (or not) on classpath.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java"><code>@ConditionalOnBean</code></a> / <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java"><code>@ConditionalOnMissingBean</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches when specified bean is present (absent).</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnWebApplication.java"><code>@ConditionalOnWebApplication</code></a> / <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplication.java"><code>@ConditionalOnNotWebApplication</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches when the application uses <code>WebApplicationContext</code> or not.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java"><code>@ConditionalOnJava</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches on Java version the application is running.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpression.java"><code>@ConditionalOnExpression</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches on specified SpEL expression.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndi.java"><code>@ConditionalOnJndi</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches if one of provided names can be looked up in JNDI.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java"><code>@ConditionalOnProperty</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches if a property with specified value can be found in Spring Environment.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResource.java"><code>@ConditionalOnResource</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Matches when specified resource can be found.</p></td>
</tr>
</tbody>
</table>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 2. Configuration order annotations</caption>
<colgroup>
<col style="width: 33%;">
<col style="width: 66%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Annotation</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureBefore.java"><code>@AutoConfigureBefore</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Marks annotated auto-configuration class to be resolved before other auto-configuration classes.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureAfter.java"><code>@AutoConfigureAfter</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Marks annotated auto-configuration class to be resolved after other auto-configuration classes.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureOrder.java"><code>@AutoConfigureOrder</code></a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allows auto-configuration classes to be resolved in a specific order without knowledge of each other.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>To help solve potential auto-configuration problems just run your Spring Boot application with a <code>--debug</code> switch
(or <code>-Ddebug</code> system property). It will output nice <strong>Auto Configuration Report</strong> to the console. It contains all found
auto-configuration classes, divided into 4 sections:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Positive matches</p>
</li>
<li>
<p>Negative matches</p>
</li>
<li>
<p>Exclusions</p>
</li>
<li>
<p>Unconditional classes</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When <code>spring-boot-starter-actuator</code> dependency is added to your project, there is an alternative way to get information about
auto-configuration classes by calling <code>/autoconfig</code> endpoint.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>To know the exact order of classes execution you can also put a breakpoint
in <code>EnableAutoConfigurationImportSelector</code> in a place where <code>AutoConfigurationSorter</code> is
<a href="https://github.com/spring-projects/spring-boot/blob/0c1dd1aac5517ce6dc42c64b21515b5d2d1e8c75/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java#L192">used</a>.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="custom-starter-guidelines">Custom Starter guidelines</h3>
<div class="paragraph">
<p>As Spring Boot <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-custom-starter-naming">documentation</a> states,
you should not begin your starter name with <strong>spring-boot-</strong>* Especially when, you are making some technology <em>"Spring Bootable"</em>.
Keep in mind that it may get official support in the future.</p>
</div>
<div class="paragraph">
<p>Spring Boot structures its Starters into two parts:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The <strong>autoconfigure</strong> module that contains the auto-configuration code.<br>
The <strong>starter</strong> module that provides a dependency to the autoconfigure module as well as the library and any additional
dependencies that are typically useful.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Spring Boot documentation
</div>
</div>
<div class="paragraph">
<p>For custom Starters there is also a suggestion that both these modules can be combined into a single one named simply
<strong>starter</strong>. That&#8217;s how we approach creating our Starters, and couldn&#8217;t come up with a good reason to split.</p>
</div>
<div class="paragraph">
<p>No matter, if you want to create a Starter to support a technology, or to encapsulate common behaviour among your
applications, always try to provide sensible defaults with an option of extensive configuration. To achieve that you can
provide configuration keys in your Starter. To do that, mark a simple POJO class with a <code>@ConfigurationProperties</code>
annotation, providing prefix for your properties (again, do not make same prefixes as Spring Boot is using:
<strong>spring</strong>, <strong>server</strong>, etc). Example property class:</p>
</div>
<div class="listingblock">
<div class="title">SwaggerProperties.java</div>
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@ConfigurationProperties</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">neostarter.swagger</span><span class="delimiter">&quot;</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">SwaggerProperties</span> {

    <span class="comment">/**
     * Enable swagger switch
     */</span>
    <span class="directive">private</span> <span class="type">boolean</span> enabled = <span class="predefined-constant">true</span>;

    <span class="comment">/**
     * Should generated swagger.json be formatted
     */</span>
    <span class="directive">private</span> <span class="type">boolean</span> prettyPrint = <span class="predefined-constant">true</span>;

    <span class="comment">/**
     * Provides the version of the application API
     */</span>
    <span class="directive">private</span> <span class="predefined-type">String</span> version = <span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>;

    <span class="comment">/**
     * The contact information for the exposed API.
     */</span>
    <span class="directive">private</span> <span class="predefined-type">String</span> contact = <span class="string"><span class="delimiter">&quot;</span><span class="content">backend@neoteric.eu</span><span class="delimiter">&quot;</span></span>;

    <span class="comment">/**
     * The transfer protocol for the operation. Values MUST be from the list: &quot;http&quot;, &quot;https&quot;, &quot;ws&quot;, &quot;wss&quot;.
     */</span>
    <span class="directive">private</span> <span class="predefined-type">String</span><span class="type">[]</span> schemes = {<span class="string"><span class="delimiter">&quot;</span><span class="content">http</span><span class="delimiter">&quot;</span></span>};

    <span class="comment">/**
     * The title of the application.
     */</span>
    <span class="directive">private</span> <span class="predefined-type">String</span> title;

    ... (more fields, getters and setters) ...

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can then use the configuration properties as a conditions for your auto-configuration (via <code>@ConditionalOnProperty</code>)
or / and register it with <code>@EnableConfigProperties</code> and inject into auto-configuration class. As said
<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#configuration-metadata-annotation-processor">here</a>
you can use annotation processing to help IDE assist on your custom properties auto-completion:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://blog.poznachowski.pl/images/starters/ide-hints.png" alt="IDE autocompletion">
</div>
</div>
<div class="paragraph">
<p>To achieve that, add an optional dependency (in Maven):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>org.springframework.boot<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;optional&gt;</span>true<span class="tag">&lt;/optional&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>and it will pick up your fields Javadoc set up and provide as an auto-completion description.</p>
</div>
<div class="paragraph">
<p>Another important thing Spring Boot provides is that you don&#8217;t have to worry about dependencies version management.
Spring Boot picks dependencies (and its versions) that works well with each other. Additional value your Starter brings
is that you have already specified libraries versions you use and the end-user don&#8217;t have to think about that anymore (and
potential version conflicts).</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If you ever feel trapped into the corner, do not hesitate to dive deep into Spring Boot&#8217;s codebase.
It is very well written and documented. When you get along with it, nothing will seem magical anymore. Don&#8217;t also forget
about <a href="http://stackoverflow.com/questions/tagged/spring-boot">Stack Overflow</a> or Spring Boot
<a href="https://gitter.im/spring-projects/spring-boot">Gitter</a> channel. There is a chance that somebody had same problem you are
having. If not, don&#8217;t be afraid to ask - people there are more than happy to help you.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="neo-starters">Neo-Starters</h3>
<div class="paragraph">
<p>At Neoteric we have worked out some practices and standards for our services. Hence, came up with an idea that we can bend
Spring Boot to our needs even more by creating our own set of starters. They would encapsulate these practices and enable
us to develop new applications faster and with even less boilerplate code needed. We called them <code>neo-starters</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Neo-Starters are available at Neoteric&#8217;s <a href="http://github.com/neoteric-eu/neo-starters">GitHub</a>. However, they are still
under heavy development and subject to breaking changes.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Each starter covers individual aspects of application. I will cover their details (whys and hows) in upcoming blog posts&#8230;&#8203;</p>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Befriend your changelog]]></title>
    <link href="http://blog.poznachowski.pl/2015/08/04/befriend-your-changelog/"/>
    <updated>2015-08-04T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2015/08/04/befriend-your-changelog</id>
    <content type="html"><![CDATA[<p>If you are tired of maintaining your changelog files manually, following solution may help you as it helped me.</p>

<p>At my current company we have quite a lot of services to maintain. Some time ago we introduced proper versioning and releasing.
That was a great step forward, but we were still missing an important piece. We wanted to have an easy way to know what was
introduced (features &amp; bug fixes) in each version. Appending information to a changelog file manually quickly became 
tedious job, as our release cycles can be very short.</p>

<p>To overcome this, I came up with a solution of having the changelog file generated automatically out of git commit messages.
It consists of two parts. First is about adding a generated html file to a released Maven artifact, so it can be easily accessible
in Maven artifacts repository (such as Nexus). Second part is about keeping up-to-date changelog.md file in the project root folder.</p>

<p>This fit our git-flow releasing cycle flawlessly (whole process occurs in a release branch). I already described our cycle <a href="http://neoteric.eu/2015/04/make-jenkins-speak-git-flow/">here</a>. 
However, it shouldn’t be much of a hassle to adapt the solution to your preffered flow.</p>

<p>Core part of the solution is the <a href="http://danielflower.github.io/maven-gitlog-plugin/">maven-gitlog-plugin</a> created by Daniel Flower.
It’s a simple tool, that gets most of the job done. It generates changelog out of the git commits. It can output to a text, markdown, HTML or even JSON file.
It supports GitHub and JIRA issue trackers and its configuration is really easy.</p>

<p>All of the below xml snippets are a part of our ‘release’ Maven profile.</p>

<p><strong>Baseline is to have the gitlog plugin set up and configured in pom.xml:</strong></p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="tag">&lt;plugin&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="tag">&lt;groupId&gt;</span>com.github.danielflower.mavenplugins<span class="tag">&lt;/groupId&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="tag">&lt;artifactId&gt;</span>gitlog-maven-plugin<span class="tag">&lt;/artifactId&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="tag">&lt;fullGitMessage&gt;</span>true<span class="tag">&lt;/fullGitMessage&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>            <span class="tag">&lt;excludeCommiters&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>                <span class="tag">&lt;commiter&gt;</span>jenkins<span class="tag">&lt;/commiter&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="tag">&lt;/excludeCommiters&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="tag">&lt;dateFormat&gt;</span>yyyy-MM-dd<span class="tag">&lt;/dateFormat&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="tag">&lt;markdownChangeLogFilename&gt;</span>CHANGELOG.md<span class="tag">&lt;/markdownChangeLogFilename&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="tag">&lt;generateMarkdownChangeLog&gt;</span>true<span class="tag">&lt;/generateMarkdownChangeLog&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="tag">&lt;generateJSONChangeLog&gt;</span>false<span class="tag">&lt;/generateJSONChangeLog&gt;</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="tag">&lt;generatePlainTextChangeLog&gt;</span>false<span class="tag">&lt;/generatePlainTextChangeLog&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="tag">&lt;outputDirectory&gt;</span>${project.basedir}<span class="tag">&lt;/outputDirectory&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="tag">&lt;/configuration&gt;</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="tag">&lt;executions&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="tag">&lt;execution&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                <span class="tag">&lt;goals&gt;</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                    <span class="tag">&lt;goal&gt;</span>generate<span class="tag">&lt;/goal&gt;</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                <span class="tag">&lt;/goals&gt;</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            <span class="tag">&lt;/execution&gt;</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="tag">&lt;/executions&gt;</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="tag">&lt;/plugin&gt;</span>
</pre></div>
</div>
</div>

<p>Important difference (in contrast to defaults) is  outputDirectory value. Instead of having changelog generated in the target folder, we want it to appear in
 project root folder - to commit the files later on. Everything else is rather self-explanatory.</p>

<p><strong>To attach changelog.html to a released Maven artifact we need to use builder-helper-maven-plugin:</strong></p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="tag">&lt;plugin&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="tag">&lt;groupId&gt;</span>org.codehaus.mojo<span class="tag">&lt;/groupId&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="tag">&lt;artifactId&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/artifactId&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="tag">&lt;executions&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="tag">&lt;execution&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                <span class="tag">&lt;id&gt;</span>attach-artifacts<span class="tag">&lt;/id&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>                <span class="tag">&lt;phase&gt;</span>package<span class="tag">&lt;/phase&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="tag">&lt;goals&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                    <span class="tag">&lt;goal&gt;</span>attach-artifact<span class="tag">&lt;/goal&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                <span class="tag">&lt;/goals&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                    <span class="tag">&lt;artifacts&gt;</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                        <span class="tag">&lt;artifact&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                            <span class="tag">&lt;file&gt;</span>changelog.html<span class="tag">&lt;/file&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                            <span class="tag">&lt;type&gt;</span>html<span class="tag">&lt;/type&gt;</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                            <span class="tag">&lt;classifier&gt;</span>changelog<span class="tag">&lt;/classifier&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                        <span class="tag">&lt;/artifact&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>                    <span class="tag">&lt;/artifacts&gt;</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>                <span class="tag">&lt;/configuration&gt;</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            <span class="tag">&lt;/execution&gt;</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        <span class="tag">&lt;/executions&gt;</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="tag">&lt;/plugin&gt;</span>
</pre></div>
</div>
</div>

<p>Then in Nexus we can easily navigate to the changelog:</p>

<p><img src="http://blog.poznachowski.pl/images/changelog/nexus.jpg" /></p>

<p>Sample html output is available <a href="http://s000.tinyupload.com/index.php?file_id=62694510974038154928">here</a>.</p>

<p><strong>Keeping up-to-date changelog in your project folder requires additional step of commiting and pushing newly generated files:</strong></p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="tag">&lt;plugin&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="tag">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/groupId&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="tag">&lt;artifactId&gt;</span>maven-scm-plugin<span class="tag">&lt;/artifactId&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="tag">&lt;executions&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="tag">&lt;execution&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                <span class="tag">&lt;id&gt;</span>add-changelog-to-git<span class="tag">&lt;/id&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>                <span class="tag">&lt;phase&gt;</span>package<span class="tag">&lt;/phase&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                <span class="tag">&lt;goals&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>                    <span class="tag">&lt;goal&gt;</span>add<span class="tag">&lt;/goal&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                    <span class="tag">&lt;goal&gt;</span>checkin<span class="tag">&lt;/goal&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>                <span class="tag">&lt;/goals&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                <span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                    <span class="tag">&lt;basedir&gt;</span>./<span class="tag">&lt;/basedir&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    <span class="tag">&lt;includes&gt;</span>CHANGELOG.md, changelog.html<span class="tag">&lt;/includes&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                    <span class="tag">&lt;message&gt;</span>Add changelog<span class="tag">&lt;/message&gt;</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                    <span class="tag">&lt;pushChanges&gt;</span>true<span class="tag">&lt;/pushChanges&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="tag">&lt;/configuration&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="tag">&lt;/execution&gt;</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span class="tag">&lt;/executions&gt;</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="tag">&lt;/plugin&gt;</span>
</pre></div>
</div>
</div>

<p>Maven scm plugin needs scm element specified. I had problems with defining Git addresses properly, but <a href="http://stackoverflow.com/a/15391341/2514330">this</a> Stack Overflow
 response did the trick:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>    <span class="tag">&lt;scm&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>        <span class="tag">&lt;url&gt;</span>https://github.com/XXX/YYY<span class="tag">&lt;/url&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>        <span class="tag">&lt;connection&gt;</span>scm:git:ssh://git@github.com/XXX/YYY.git<span class="tag">&lt;/connection&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>        <span class="tag">&lt;developerConnection&gt;</span>scm:git:ssh://git@github.com/XXX/YYY.git<span class="tag">&lt;/developerConnection&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;/scm&gt;</span>
</pre></div>
</div>
</div>

<p>That’s it. Your changelog always stay fresh. However, there is one catch from now on.
You should pay attention to quality of your commit messages (nice writing on that by Chris Beams <a href="http://chris.beams.io/posts/git-commit/">here</a>).
But… you was already doing that, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to Octopress]]></title>
    <link href="http://blog.poznachowski.pl/2015/05/27/migrating-to-octopress/"/>
    <updated>2015-05-27T04:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2015/05/27/migrating-to-octopress</id>
    <content type="html"><![CDATA[<p>I decided to move from Blogger to something, which is more close to a developer’s nature - <a href="http://http://octopress.org/">Octopress</a>.
Now I can write my blog in my favourite IDE using language I’m used to (Markdown). However, my biggest motivation was to change the
old layout to something up-to-date. Due to the migration I also expect one more thing to happen - me writing more often. :)</p>

<p>To make this post somehow valuable, I will outline few steps I followed and share links I found useful. In general,<br />
I consider the migration rather smooth, especially as I did not have any knowledge on Octopress, <a href="http://jekyllrb.com/">Jekyll</a>
 and <a href="https://www.ruby-lang.org">Ruby</a> before. It took me a single weekend to set up everything (Most of the time - tweaking the theme).</p>

<p><em><strong>Note</strong>: While I was writing this, I realized that I used somewhat old Octopress version (or at least an old way of using it). 
Latest version instructions are only available on <a href="https://github.com/octopress/octopress">Octopus GitHub</a> (as for today). Nevertheless, 
 it works as is, so I’m not bothered with it right now.</em></p>

<p>Firstly, I want to point out that <a href="http://octopress.org/docs/">documentation</a> of Octopress is well written and everything is clearly explained. 
Another place to go is <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">Jason’s series of posts</a> strictly on migrating from Blogger to Octopress.
I will add some notes, when something was not clear for me or if it was out of scope of the Octopress.</p>

<p>For reference: I use <em>Ubuntu Gnome 15.04</em>.</p>

<ul>
  <li>Installing Ruby</li>
</ul>

<p>I installed the exact version they recommend <em>(1.9.3-rc0)</em> using <a href="http://octopress.org/docs/setup/rbenv/">rbenv</a>. When cloning rbenv remember
    to stay in your home folder :)</p>

<ul>
  <li>
    <p>Installing ExecJS</p>

    <p>I went with <em>therubyracer</em>, but I have encountered a problem of ExecJS not finding JavaScript environment. Surprisingly (at least for me)
  <a href="http://stackoverflow.com/questions/16846088/rails-server-does-not-start-could-not-find-a-javascript-runtime">installing Node.js</a> helps.</p>
  </li>
  <li>
    <p>Installing Octopress and deploying to GitHub</p>

    <p>That was really straightforward, everything went just fine.</p>
  </li>
  <li>
    <p>Blogger posts migration</p>

    <p><a href="http://p7h.org/blog/2015/01/18/migration-blogger-to-octopress/">Posts migration</a> is an easy task, as long as you find a good version of import script.
  I went through some and eventually found the one which worked. They are really similar and I don’t remember who was the author of that specific version (sorry!), 
  Hence, I placed it as another Gist - available <a href="https://gist.github.com/poznachowski/7e34a454520a32f51698">here</a>.</p>
  </li>
  <li>
    <p>Comments migration</p>

    <p>I decided to go with Disqus. Octopress has a built-in support, so it was an obvious choice. And here is the biggest disappointment. Disqus has lost
  support for importing comments from blogger (<a href="https://disqus.com/home/channel/discussdisqus/discussion/channel-discussdisqus/problems_syncing_comments_to_blogger/">Source</a>).
  I did not have that much to migrate and I decided to leave my old comments behind.</p>
  </li>
  <li>
    <p>Custom domain</p>

    <p>Everything is well described in the Octopress docs. I want to share my experience here: for the first time I managed to switch the domain
  within seconds!</p>
  </li>
  <li>
    <p>Fixing links and handling redirects</p>

    <p>As I have only few blog posts so far, I handled broken links in posts manually. You can use tools for search and replace like sed or something similar.
  Redirects were a little bit more tricky. <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-6-301-redirect-old-posts-to-new-location/">Solution</a>
   suggested by Jason, does not seem to work anymore. Blogger template is now strictly XML validated and <a href="https://support.google.com/blogger/answer/42095?hl=en">these</a>
   tags don’t work currently. The other option I found is <a href="http://salman-w.blogspot.com/2013/04/301-redirect-old-blogger-blog-to-new-address.html">here</a>.
  The solution is really naive. I modified it a little bit - the pages are now recognized not by URL, but by title, as one can provide URL in
  different blogspot domains:</p>
  </li>
</ul>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;b:if</span> <span class="attribute-name">cond</span>=<span class="string"><span class="delimiter">'</span><span class="content">data:blog.pageTitle == </span><span class="entity">&amp;quot;</span><span class="content">It</span><span class="entity">&amp;apos;</span><span class="content">s SOAP</span><span class="entity">&amp;apos;</span><span class="content">s Fault...: Handling Groovy scripts in Mule ESB</span><span class="entity">&amp;quot;</span><span class="delimiter">'</span></span><span class="tag">&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="tag">&lt;meta</span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">'</span><span class="content">0;url=http://blog.poznachowski.pl/2013/11/03/handling-groovy-scripts-in-mule-esb/</span><span class="delimiter">'</span></span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">'</span><span class="content">refresh</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="tag">&lt;b:elseif</span> <span class="attribute-name">cond</span>=<span class="string"><span class="delimiter">'</span><span class="content">data:blog.pageTitle == </span><span class="entity">&amp;quot;</span><span class="content">It</span><span class="entity">&amp;apos;</span><span class="content">s SOAP</span><span class="entity">&amp;apos;</span><span class="content">s Fault...: MUnit testing, Mule best practices and more...</span><span class="entity">&amp;quot;</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="tag">&lt;meta</span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">'</span><span class="content">0;url=http://blog.poznachowski.pl/2014/04/03/munit-testing-mule-practices-and-some/</span><span class="delimiter">'</span></span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">'</span><span class="content">refresh</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="tag">&lt;b:elseif</span> <span class="attribute-name">cond</span>=<span class="string"><span class="delimiter">'</span><span class="content">data:blog.pageTitle == </span><span class="entity">&amp;quot;</span><span class="content">It</span><span class="entity">&amp;apos;</span><span class="content">s SOAP</span><span class="entity">&amp;apos;</span><span class="content">s Fault...: Exposing RESTful interface with Mule pt.2</span><span class="entity">&amp;quot;</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="tag">&lt;meta</span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">'</span><span class="content">0;url=http://blog.poznachowski.pl/2013/10/20/exposing-restful-interface-with-mule-pt2/</span><span class="delimiter">'</span></span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">'</span><span class="content">refresh</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="tag">&lt;b:elseif</span> <span class="attribute-name">cond</span>=<span class="string"><span class="delimiter">'</span><span class="content">data:blog.pageTitle == </span><span class="entity">&amp;quot;</span><span class="content">It</span><span class="entity">&amp;apos;</span><span class="content">s SOAP</span><span class="entity">&amp;apos;</span><span class="content">s Fault...: Exposing RESTful interface with Mule pt.1</span><span class="entity">&amp;quot;</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="tag">&lt;meta</span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">'</span><span class="content">0;url=http://blog.poznachowski.pl/2013/10/11/exposing-restful-interface-with-mule-pt1/</span><span class="delimiter">'</span></span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">'</span><span class="content">refresh</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="tag">&lt;b:elseif</span> <span class="attribute-name">cond</span>=<span class="string"><span class="delimiter">'</span><span class="content">data:blog.pageTitle == </span><span class="entity">&amp;quot;</span><span class="content">It</span><span class="entity">&amp;apos;</span><span class="content">s SOAP</span><span class="entity">&amp;apos;</span><span class="content">s Fault...: How to make Jenkins speak Git Flow?</span><span class="entity">&amp;quot;</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="tag">&lt;meta</span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">'</span><span class="content">0;url=http://blog.poznachowski.pl/2015/02/14/how-to-make-jenkins-speak-git-flow/</span><span class="delimiter">'</span></span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">'</span><span class="content">refresh</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="tag">&lt;b:else</span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="tag">&lt;meta</span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">'</span><span class="content">0;url=http://blog.poznachowski.pl</span><span class="delimiter">'</span></span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">'</span><span class="content">refresh</span><span class="delimiter">'</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="tag">&lt;/b:if&gt;</span>
</pre></div>
</div>
</div>

<ul>
  <li>
    <p>Making the blog look nice</p>

    <p>This is the part that took me 80% of the time. My first step around Octopress was <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">searching</a> 
  for a good looking theme. I ended up using <a href="https://github.com/alexgaribay/octoflat">Octoflat</a>. It looked really nice, but I wanted to tweak
  it a little bit. Important places to investigate are: <em>source/_layouts</em>, <em>source/_includes</em>, <em>sass/_flat-ui.scss</em>. It is important to get familiar with <a href="http://liquidmarkup.org/">Liquid</a>,
  which is a templating language used in Jekyll. Fortunately, it’s pretty easy to grasp.</p>
  </li>
  <li>
    <p>Code syntax highlight</p>

    <p>Default version of code highlighter of Octopress has two color schemes, which I didn’t find attractive. Then I found <a href="http://coderay.rubychan.de/">Coderay</a> 
  and an <a href="http://blog.alestanis.com/2013/02/04/octopress-and-the-twilight-color-scheme/">article</a>, how to integrate it into the blog.
  The problem I had is that line number greater than 9 were not shown properly. I found a <a href="https://github.com/rubychan/coderay/issues/102">solution</a> for that.
  This indicated me another thing. Root cause of submitted issue - line numbers of wrapped lines are out of sync. Unfortunately, it still applies
  in my case. I need to work on that.</p>
  </li>
</ul>

<p>That would sum up all things I was coping with last weekend. My next goal is to introduce <a href="http://asciidoctor.org/">Asciidoctor</a> to the blog and
make sure everything works as expected :) If you have any suggestions or comments, please reach out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make Jenkins speak Git Flow?]]></title>
    <link href="http://blog.poznachowski.pl/2015/02/14/how-to-make-jenkins-speak-git-flow/"/>
    <updated>2015-02-14T00:00:00+01:00</updated>
    <id>http://blog.poznachowski.pl/2015/02/14/how-to-make-jenkins-speak-git-flow</id>
    <content type="html"><![CDATA[<p>It’s been a while and quite a lot has changed since then. I moved to a different company, which means I won’t be playing around with Mule for now. 
On the other hand, I have several new things to play with. <br />
My current company lacked of proper versioning capability of their products. Hence, my first task was to help with that matter. 
The plan was to be able to utilize Jenkins for modules releases (via Maven) with keeping all powers of a Git Flow branching convention. 
What’s more, I extended existing functionality of building Debian packages and used Nexus as a native .deb repository.</p>

<p>As of the technical background: We use Git as our version control system, Maven as a build tool and Jenkins as an 
integration platform. So far, we mainly had one master branch where most of the development took place. Feature branches
 were spawned occasionally. All artifacts were using the same 1.0.0 version, which obviously introduced a lot of hassle 
 and pain. We wanted to put an end to that and start doing things like they should be done.</p>

<p>We were attracted to the <a href="http://nvie.com/posts/a-successful-git-branching-model/">Git Flow branching model</a>. Some of us 
already used it, to some extent, in front-end development. Hence, it felt natural to adopt it on the back-end side as well.
 The aim was to make use of this branching model as pleasant as possible to us and leave coping with modules versioning to 
 Jenkins.</p>

<p>I started to play around with Jenkins and Git and what I didn’t like about their cooperation in the first place (one job per
 Git repository) was lack of clear feedback. I couldn’t tell which exact branch has just been built. What’s more, It looked 
 as it would stop me from fully utilizing Git Flow potential in terms of releasing and versioning. Hence, first step emerged:</p>

<h2 id="keeping-separate-jobs-per-branch">1. Keeping separate jobs per branch</h2>

<p>How can we achieve that? Of course, we can manually create and drop Jenkins jobs per each feature, hotfix and release branches. 
Any volunteers…? I thought so :) Not without a reason it is said that the <a href="http://threevirtues.com/">programmer biggest virtue</a> is laziness. 
I had to find a way to automate that. When I googled, I was surprised. I couldn’t find an easy solution for that 
(or didn’t google enough). Even if found, it, very often, introduced a lot of dirty scripting and workarounds. 
The tool, which seemed to be most elegant and closest to our needs, is <a href="http://entagen.github.io/jenkins-build-per-branch/">Jenkins Build Per Branch by Entagen</a>. 
It is a Groovy script, which you invoke from a Jenkins job as a Gradle task. However, it looks to be more useful 
in a different type of branching convention (GitHub Flow).</p>

<p>As I really liked the idea behind I decided to work on Git Flow variation of the script: <a href="http://github.com/neoteric-eu/jenkins-build-per-gitflow-branch">Jenkins Build Per Git Flow Branch</a>. 
Pretty much everything (genesis, installation, usage) is described at the GitHub project page, so it’s better to check it out, before further reading.</p>

<p>Ok, so Jenkins provides really nice Git Flow job management now. We need to figure out how to utilize that for Maven artifacts releasing.</p>

<h2 id="maven-releasing">2. Maven releasing</h2>

<p>Back in the days, when working with SVN, there was a Maven Release Plugin (and M2 Release Jenkins plugin) to accomplish 
the releasing part. It wasn’t great, but when configured properly, it did the job pretty well. I started to dig in how to 
make releasing work with Git Flow. It appears that it is still possible using Maven Release Plugin, but it can be tedious 
and troublesome work. It seems that much better solution exists. It is a plugin created by 
Jonatan Doklovic – <a href="https://bitbucket.org/atlassian/jgit-flow/wiki/Home">Maven JGit Flow Plugin</a>. 
He has already done a good job explaining it in his <a href="http://blogs.atlassian.com/2013/05/maven-git-flow-plugin-for-better-releases/">blog post</a> and describing the 
advantages over old approach.</p>

<h2 id="combining-the-ingredients">3. Combining the ingredients</h2>

<p>It looks like we have all the necessary ingredients, so let’s start cooking.</p>

<h3 id="pomxml">pom.xml</h3>

<p>Two things are required in our pom.xml build file. Firstly, we need to set up the artifact repository as usual:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    <span class="tag">&lt;distributionManagement&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="tag">&lt;repository&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>            <span class="tag">&lt;id&gt;</span>releases<span class="tag">&lt;/id&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="tag">&lt;name&gt;</span>Releases<span class="tag">&lt;/name&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>            <span class="tag">&lt;url&gt;</span>http://your.release.artifacts.repository.url<span class="tag">&lt;/url&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="tag">&lt;/repository&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="tag">&lt;snapshotRepository&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="tag">&lt;id&gt;</span>snapshots<span class="tag">&lt;/id&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="tag">&lt;name&gt;</span>Snapshots<span class="tag">&lt;/name&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            <span class="tag">&lt;url&gt;</span>http://your.snapshot.artifacts.repository.url<span class="tag">&lt;/url&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="tag">&lt;/snapshotRepository&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="tag">&lt;/distributionManagement&gt;</span>
</pre></div>
</div>
</div>
<p><em>Note: Snapshot repository address won’t be used in our example, we decided to store only final releases.</em></p>

<p>Secondly, we need to configure the JGitFlow Plugin:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="tag">&lt;plugin&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;groupId&gt;</span>external.atlassian.jgitflow<span class="tag">&lt;/groupId&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="tag">&lt;artifactId&gt;</span>jgitflow-maven-plugin<span class="tag">&lt;/artifactId&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="tag">&lt;pushFeatures&gt;</span>true<span class="tag">&lt;/pushFeatures&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="tag">&lt;pushHotfixes&gt;</span>true<span class="tag">&lt;/pushHotfixes&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="tag">&lt;pushReleases&gt;</span>true<span class="tag">&lt;/pushReleases&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="tag">&lt;enableSshAgent&gt;</span>true<span class="tag">&lt;/enableSshAgent&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="tag">&lt;flowInitContext&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="tag">&lt;masterBranchName&gt;</span>master<span class="tag">&lt;/masterBranchName&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="tag">&lt;developBranchName&gt;</span>development<span class="tag">&lt;/developBranchName&gt;</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            <span class="tag">&lt;featureBranchPrefix&gt;</span>feature-<span class="tag">&lt;/featureBranchPrefix&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>            <span class="tag">&lt;releaseBranchPrefix&gt;</span>release-<span class="tag">&lt;/releaseBranchPrefix&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="tag">&lt;hotfixBranchPrefix&gt;</span>hotfix-<span class="tag">&lt;/hotfixBranchPrefix&gt;</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            <span class="tag">&lt;versionTagPrefix&gt;</span>${project.artifactId}-<span class="tag">&lt;/versionTagPrefix&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="tag">&lt;/flowInitContext&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="tag">&lt;/configuration&gt;</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="tag">&lt;/plugin&gt;</span>
</pre></div>
</div>
</div>

<p>We want to make the plugin doing the pushes for us and we need to make sure that we follow the ‘-‘ suffix 
(i.e. release-) branch naming convention (as explained in the Jenkins tool readme). EnableSshAgent value 
is set for connectivity purposes.</p>

<p>As stated previously, ground point is that Jenkins handles modules building and releasing. One benefit is a 
guarantee of same compilator version among the builds. What’s more, some of our developers are working on 
Windows OS, hence they are not able to build .deb packages out of the box (and we use them to distribute our services). 
Again, Jenkins to the rescue!</p>

<p>I think that most sensible way of explaining the concept is going throught the whole flow step by step. And I will 
try to accomplish that:</p>

<h3 id="feature-branches">feature branches</h3>

<p>So, let’s assume that master and development jobs are already set up (we will cover them in a while) and I want to start 
working on a new feature. After I make sure that my project has clear Git status (nothing left to be commited etc.), I 
can execute JGitFlow Maven goal:<br />
<strong>mvn jgitflow:feature-start</strong></p>

<p>Shortly, after providing the feature branch name in the Maven interactive console, two things will happen: created 
feature branch will be pushed to the remote repository by JGitFlow plugin and during Jenkins Git Flow per Branch (I’ll 
abbreviate it to JGFPB) sync job execution, it will create an actual job based on the feature job template. How the 
template should look like? In our case it’s the simplest scenario you can imagine. We only want to execute maven clean 
install. Let’s look at the example:</p>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/feature-template-1.jpg" /></p>

<p>Currently, we are using two sets of templates: one for ordinary jars and the other for debian packages. 
As you can see, I’m goint to focus on the first one. The latter is a topic for a next blog post. Remaining part 
of this screenshot is the fact, that I added the startOnCreate parameter as I want to build the project as soon as 
it shows up. That will probably be the case in most situations.</p>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/feature-template-2.jpg" /></p>

<p>Nothing fancy here as well. At this point, ‚Repository URL‚ value is irrelevant. It will be substituted for the Git 
URL by the Jenkins Sync Job. The same applies to ‘Branches to build’. And yes, we are using GitLab :)</p>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/feature-template-3.jpg" /></p>

<p>Maven clean install. Nothing more, nothing less.</p>

<p>If you’d like to perform Sonar builds out of your feature jobs, you just need to add Sonar post-build-step and 
provide any value in ‚branch’ field. JGFPB tool will do it’s job and replace the branch accordingly (as it does 
with Git URL and branch to build)</p>

<p>Are you ready to deliver your feature? Just finish it by JGitFlow: <em>*mvn jgitflow:feature-finish</em> and pick the 
feature you want to finish in the Maven interactive console. That’s it. The plugin will merge it into development, 
delete the branch and the Sync Job will remove the Jenkins feature job when executed. As you see, working with features 
is pretty simple.</p>

<h3 id="development">development</h3>

<p>Now it’s time for the key player – the development job. One of the two ‚fixed’ jobs (along with master). As Git Flow 
branching model suggest it should always contain production-ready like codebase. Hence, it should be responsible for 
initiating the release process. To do that we can incorporate <a href="https://wiki.jenkins-ci.org/display/JENKINS/Release+Plugin">Release Jenkins plugin</a>. It will enable us to start a 
customizable job with different execution than the usual build. Here are most important bits of development job 
configuration:</p>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/development-1.jpg" /></p>

<ul>
  <li>We obviously want to check out development branch.</li>
  <li>We should prune stale remote branches. Otherwise, Jenkins (JGitFlow plugin to be precise) wouldn’t allow us to do more 
that one release.</li>
  <li>We also need to make Jenkins Git plugin checkout the project to a specific local branch.</li>
  <li>Now the release configuration. We are happy with the defaults of Release Plugin. When we perform the release, we are 
asked for releaseVersion and developmentVersion. The convention is that for normal releases we should increment MINOR 
version (you can read more here). When provided, GitFlow will automatically pick those values up and use them.</li>
</ul>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/development-3.jpg" /></p>

<ul>
  <li>Here we specify the behaviour of the release itself. What we want to do, is to perform the <strong>jgitflow:release-start</strong> goal 
of JGitFlow Plugin. -X is a debug flag. With debug enabled we can thoroughly trace the steps of the Maven goal execution.</li>
  <li>By checking out to a specific location (instead of a default – temporary one) we are able to clean up after the release 
initialization. We are checking out again to a development branch (Plugin left Jenkins in a newly created release branch) 
and deleting the release branch locally. We won’t need it, because the release job will be created from a remote branch.</li>
  <li>Last thing to do here is to trigger the synchronization job after the release initalization is complete, so we 
wouldn’t have to wait for a cron trigger execution.</li>
</ul>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/development-4.jpg" /></p>

<ul>
  <li>For a normal build, everything is pretty ordinary. We run clean install goals. Don’t mind the profile at the 
moment, it is just for building Debian package out of the generated jar.</li>
  <li>We like to have Sonar feedback on the development branch. In Sonar advanced options we provide development as
 a branch to build.</li>
</ul>

<h3 id="releases">releases</h3>

<p>Few words of explanation before we dive into release job configuration:</p>

<p>Git-Flow recommends using release branching for so called ‚release hardening’, where you can fix all bugs found in 
UAT and prepare release metadata. We found it to be an excessive effort (at least for now) and decided to skip the 
release phase, in a way, that it starts and immediately finish the release branch. This way we still stay 
flexible, if we’d like to extend the release cycle.</p>

<p>That said, let’s analyze Release branch Jenkins template:</p>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/release-1.jpg" /></p>

<ul>
  <li>We definitely want to start the release job as soon as it appears.</li>
</ul>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/release-2.jpg" /></p>

<ul>
  <li>Again, same things apply to Git configuration, the URL and branch will be replaced by the script.</li>
</ul>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/release-3.jpg" /></p>

<ul>
  <li>Last thing is to run <strong>jgitflow:release-finish</strong> goal. We set the debug mode on, to have better understanding 
of what is going on. And yet again, don’t mind the profile.</li>
</ul>

<p>When build is completed, we should have:</p>

<ul>
  <li>our artefact release version done and deployed to the Nexus repository</li>
  <li>development branch updated with latest snapshot version.</li>
  <li>Release branch deleted by the JGitFlow plugin</li>
  <li>Release Jenkins job deleted by the JGFPB</li>
</ul>

<p>That covers almost every aspect of the releasing cycle. Last outstanding part are hotfixes. To perform such, we 
should run <strong>jgitflow:hotfix-start</strong> Maven goal. It will create and push new hotfix branch (after specifying it’s 
version in the interactive console). For most of the cases you just should increment PATCH version. Hotfix branch 
will be build against its template:</p>

<p><img src="http://blog.poznachowski.pl/images/makejenkinsspeak/hotfix-1.jpg" />
<img src="http://blog.poznachowski.pl/images/makejenkinsspeak/hotfix-2.jpg" />
<img src="http://blog.poznachowski.pl/images/makejenkinsspeak/hotfix-3.jpg" />
<img src="http://blog.poznachowski.pl/images/makejenkinsspeak/hotfix-4.jpg" /></p>

<p>There is nothing here you haven’t seen already. Most notable difference is the fact, that hotfix template has 
releasing capability enabled (but still, it’s exactly the same as you saw in development branch config). Maven goal 
for releasing hotfix branch is jgitflow:hotfix-finish. Usage of hotfix branch is easy. When you’re done pushing your 
fixes, you execute release build, specifying release and development versions. When hotfix is done, artefact should 
have been deployed to Nexus, branch and job should have been removed, and all hotfix changes merged to development and 
master branches. Reminder: do not forget to delete the hotfix branch locally and to git fetch prune, as the hotfix 
remote branch is no longer available.</p>

<p>That concludes all parts of making Jenkins speak Git Flow. The solution is not without flaws, but works for 
us quite well. We have a clear vision of a project status and progress without the burden of managing Jenkins 
jobs manually. Few things to consider would be: make Jenkins automatically pick version numbers from pom.xml 
itself and how to avoid unnecessary waiting for sync job to create project jobs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MUnit testing, Mule best practices and more...]]></title>
    <link href="http://blog.poznachowski.pl/2014/04/03/munit-testing-mule-practices-and-some/"/>
    <updated>2014-04-03T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2014/04/03/munit-testing-mule-practices-and-some</id>
    <content type="html"><![CDATA[<p>Quite long time passed, since my last update. I hope that this post will successfully fill the resulting gap and you will find reading it worthwhile.</p>

<p><strong>Table of Content:</strong></p>

<ol>
  <li><a href="#a-little-bit-too-long-of-a-foreword">Foreword</a></li>
  <li><a href="#munit-introduction">MUnit introduction</a></li>
  <li><a href="#think-about-your-flow-design">Think about your flow design</a></li>
  <li><a href="#test-constants">Test constants</a></li>
  <li><a href="#assertions">Assertions</a></li>
  <li><a href="#munit-test-structure">MUnit test structure</a></li>
  <li><a href="#property-enricher">Property enricher</a></li>
  <li><a href="#execution-environments">Execution environments</a></li>
  <li><a href="#mocking">Mocking</a></li>
  <li><a href="#implementing-mocked-services">Implementing mocked services</a></li>
  <li><a href="#verifying--spying">Verifying &amp; spying</a></li>
  <li><a href="#summary">Summary</a></li>
</ol>

<ul>
  <li><a href="https://github.com/poznachowski/munit-utils">munit-utils@github</a></li>
  <li><a href="https://dl.dropboxusercontent.com/u/17262593/blog/munit-utils-0.0.1.zip">munit-utils-0.0.1.zip</a></li>
</ul>

<h2 id="a-little-bit-too-long-of-a-foreword">A little bit too long of a foreword…</h2>

<p>When I first met Mule there was that thing, that made me feel a little bit discouraged. There was only residual information about best practices on how to develop Mule applications and even less advice on how to effectively test them. All Mule examples provided here and there on the Internet are presented in a deploy-click-check if works manner. Next thing is that all demos are mostly simple, one-flow applications. Question about how to cope with larger, complex configurations was left unanswered.
I’ll try to shed some light on those subjects. For starters, there is some great writing by Ryan Hoegg available at <a href="http://confluex.com/blog/integration-software-is-software/">Confluex blog</a>. I’ll try to elaborate more on some topics brought up by Ryan, but focusing mainly on testing part using MUnit framework.
When talking about testing in Mule environment it is worth to emphasize that two types of tests exist here. Following the Mule documentation naming convention, first type are <a href="http://www.mulesoft.org/documentation/display/current/Unit+Testing">unit tests</a>, which cover your self-written message processors (transformers, components etc.) Mule’s current testing capabilities are more than enough to handle those cases pretty well. In terms of testing Groovy script components <a href="http://blog.poznachowski.pl/2013/11/03/handling-groovy-scripts-in-mule-esb">here is something</a> I wrote previously.
The other are <a href="http://www.mulesoft.org/documentation/display/current/Functional+Testing">functional tests</a> - our main point of interest for this blog post.
I’d like to call them flow tests. Scope of these kinds of tests are pretty wide. How you approach them is up to you. You can test any given part of your application (depending on how you designed and structured your flows):</p>

<ul>
  <li>From testing integration between two adjacent message processors</li>
  <li>via business logic branches (capable of having mocked out any part of the process - external service calls, connections to DB, sending MQ messages etc.)</li>
  <li>to full system testing with all external services calls on board.</li>
</ul>

<p>Obviously, the best is to have mix of those, excluding the latter from your automated build test suite. We don’t want to call actual, external services each build, do we? <a href="http://stackoverflow.com/questions/2606572/junit-splitting-integration-test-and-unit-tests">Here</a> is an idea of how you can separate them.</p>

<p>For all that MUnit comes in handy…</p>

<h2 id="munit-introduction">MUnit introduction</h2>

<p><a href="https://github.com/mulesoft/munit">MUnit</a> is a next generation Mule testing framework. It is still under development, but its current state (3.4-M5) is more than enough to persuade me to use it in my work projects. In fact, I’m using it since the first day I discovered it, as the <a href="http://www.mulesoft.org/documentation/display/current/Introduction+to+Testing+Mule">current testing framework</a> lacks flexibility in my opinion.
Plenty of MUnit features are not easily available to the current, official version (i.e. mocking flows and outbound endpoints is cumbersome and requires a lot of effort). What’s more, MUnit comes in two flavours:</p>

<ul>
  <li>Well-known Java approach, where you write your tests as you would normally do (via JUnit).</li>
  <li>Mule XML code with MUnit schema.</li>
</ul>

<p>One thing needs mentioning. This blog post is strictly Java-centric, I won’t tell you anything about the XML way of writing MUnit tests. If that was not what you were looking for, I’m sorry to disappoint you.
The reason is simple - I’m not a fan of XML and the Java approach suits me much better. Nevertheless, everything MUnit can do with XML is possible using Java (and the other way round). That’s, at least, what specification states :) (I haven’t checked that).</p>

<p>MUnit is getting more recognizable lately (eventually it ought to replace current testing framework). Latest Mule (3.5 Early Access version) starts integrating MUnit with Studio heavily. More information about MUnit capabilities is available at project’s <a href="https://github.com/mulesoft/munit/wiki">wiki page</a>, but I’ll try to cover most of its powers here.</p>

<h2 id="think-about-your-flow-design">Think about your flow design</h2>

<p>I’ll try to outline some guidelines I now follow. They emerged from my  ~year Mule integration experience. Note: I can’t guarantee they will solve all your problems nor they will fit each of possible use cases. I’m just saying that they helped me survive some of the bad times I had. What’s even more important, I’m not even sure if they are the best I can get from my cooperation with Mule and Studio. If you have your own practices, questions, suggestions I’d like to hear them!</p>

<p>In the beginning I want to emphasize that Mule’s code it’s even easier to get messy with than with Java (at least for me). Hence, having good test coverage is crucial. How you design your flows implies the ease of testing them. What’s more, I really recommend to start your work flow in a TDD manner and let you flow design be guided by tests. From my experience, I can say, it pays off greatly later on.</p>

<p>Keep your flows short, make sure that each flow follows single responsibility principle. For complex solution split your configuration file (.xmls containing flows) into smaller ones. Think in functionality and business logic terms. I’m used to having one configuration file with main flow (with source component) controlling the whole process and others implementing bigger chunks of business logic (i.e. sending attachments with gathered information, fulfilling customer data) Of course each of these configuration files can contain many flows / subflows. Mule by <em>mule-deploy.properties</em> file (<em>config.resources</em> attribute) knows, which files comprise whole application set-up.</p>

<p>Let’s say we have a requirement to expose a service via HTTP endpoint, which needs to perform some complex validation logic (on HTTP Headers, Request Body etc.), then transform the provided data into a proprietary structure, backing it up with data coming from external REST Service. Eventually send a notification email to anyone who it may concern.
Example configuration can look like this:</p>

<h3 id="main-flowxml">main-flow.xml:</h3>

<p><img src="http://blog.poznachowski.pl/images/munit/main-flow.png" /></p>

<p>This main flow can accommodate whole application process into few single flow references, which can be easily read and understood. Every of the bigger, complex tasks was extracted to a different configuration file. With such structure we can execute end-to-end tests or test only main processing paths of full solution (when flow has choice components as presented) by mocking out all referenced implementations. To not litter the main flow, we extracted variables initialization part to a subflow. Those variables can be then used in processing data or sending email part.</p>

<h3 id="validate-requestxml-process-customer-dataxml-send-email-notificationxml">validate-request.xml, process-customer-data.xml, send-email-notification.xml:</h3>

<p><img src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F3.bp.blogspot.com%2F-ffPXPwmkuIg%2FUzm4vdjzh8I%2FAAAAAAAAESI%2FKSbK0a6w3JY%2Fs1600%2Fvalidate-request.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" alt="" /><img src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F2.bp.blogspot.com%2F-KhvkAdcVyDg%2FUzm4vWaLleI%2FAAAAAAAAESE%2Fz8Rk6OazIIc%2Fs1600%2Fprocess-customer-data.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" alt="" /><img src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F1.bp.blogspot.com%2F-ziYLEL3ykYQ%2FUzm4vVLE4AI%2FAAAAAAAAESM%2FmzUMHA0PbfY%2Fs1600%2Fsend-notification-email.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" alt="" /></p>

<p>Each of that configuration files is responsible for different phase of the solution. We can do the same with them if the flows would get bigger: split into more compact flows / subflows or even into another configuration files if necessary.</p>

<p>At some point in time, you may come up with the idea, that part of application should be extracted as separate Mule application. Keeping your flows modularized, makes this task relatively easy.
What’s also important (and it’s our subject) is that it allows us to test parts of the application in isolation. With MUnit you don’t need to have an inbound endpoint to call your flow. In fact, in MUnit you can access any flow directly (it disables all inbounds by default). You can test validation part by running your test against <em>ValidateHTTPRequest</em> flow or check if all variables were initialized properly by calling <em>InitializeVariables</em> subflow from within MUnit test.</p>

<p>Lastly, a word about flow ‘packaging’. Unfortunately Studio can’t accept the fact that I’d like to have my config files structured in subdirectories. The only appropriate place for them, according to Studio, is <em>src/main/app</em>. Whenever you try to put a flow config into a subfolder, Studio recreates it in ‘root’ directory..</p>

<h2 id="test-constants">Test constants</h2>
<p>You will be using variables in your tests. A lot! Flow names, variable names, configuration files to name a few. Keeping those names as interface constants gives you two advantages:
1. When renaming any variable, you don’t have to go through all tests and correct one by one - just rename once in the interface.
2. When you enable your interface class for static imports in Mule Studio, you can type those values in no-time using code completion assistance:</p>

<p><img src="http://blog.poznachowski.pl/images/munit/test_constants_code_compl.png" /></p>

<h2 id="assertions">Assertions</h2>

<p>To make sure that flows behave in the way we expect them to, there are two objects we are most interested in checking: <strong>MuleEvent</strong> and <strong>MuleMessage</strong>. These two are main targets for assertion expressions. MuleEvent is a basic entity which MUnit test returns as a result. it contains MuleMessage, attachments and session data.</p>

<p>I’m a big fan of fluent assertions, hence I strongly recommend giving them a try. <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> is the framework to look at. It’s a successor of <a href="https://github.com/alexruiz/fest-assert-2.x/wiki">Fest Assert</a>. Constantly under development, has plenty of contributors with a thriving community. Most valuable benefit of using AssertJ is the great number of assertion types and direct support from your IDE (code completion).</p>

<p>To ease work with Mule stuff, I’ve created small extension for AssertJ. It is available at my GitHub, <a href="https://github.com/poznachowski/munit-utils">here</a>. Right now it’s an early version, bound together with something I call property enricher (I’ll cover that later on). It covers presence of Mule Message properties (of different scopes), payload checks etc. Not everything’s included, but most common cases I encountered in my projects.
It’s not available in any public repository (yet?). You can build it yourself or get jar and sources from <a href="https://dl.dropboxusercontent.com/u/17262593/blog/munit-utils-0.0.1.zip">here</a>, then install them into your local maven repository <a href="http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html">manually</a> (or preferably into your artefact repository). Then you follow these instructions, common for every other AssertJ extension:</p>

<ol>
  <li>Add the library to your project</li>
  <li>Enable <strong>pl.poznachowski.mule.message.assertions.Assertions</strong> for static imports</li>
  <li>Start using:</li>
</ol>

<p><img src="http://blog.poznachowski.pl/images/munit/assertThat.png" />
<img src="http://blog.poznachowski.pl/images/munit/assertThat2.png" /></p>

<p>I think there is no need to go into details about available assertions. You can explore them on your own. Just one note here: When making assertions on <em>MuleEvent</em> object, make sure you ‘traverse down’ to asserting <em>MuleMessage</em> using <strong>hasMuleMessageWhich()</strong> method as the last check for <em>MuleEvent</em>, as you won’t be able to go back to it in the same assertion statement.</p>

<h2 id="munit-test-structure">MUnit test structure</h2>

<p>MUnit test does not differ much than the previous functional Mule test. Simplest example is presented below:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">package</span> <span class="namespace">pl.poznachowski.munitblogsamples</span>;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">import</span> <span class="include">static</span> <span class="include">pl.poznachowski.mule.message.assertions.Assertions.assertThat</span>;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> <span class="include">static</span> <span class="include">pl.poznachowski.munitblogsamples.TestConstants.VALIDATE_REQUEST_FLOW</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="keyword">import</span> <span class="include">org.junit.Test</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">import</span> <span class="include">org.mule.api.MuleEvent</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">import</span> <span class="include">org.mule.munit.runner.functional.FunctionalMunitSuite</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="directive">public</span> <span class="type">class</span> <span class="class">FirstMunitTest</span> <span class="directive">extends</span> FunctionalMunitSuite {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> <span class="annotation">@Test</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> <span class="directive">public</span> <span class="type">void</span> simplestTest() <span class="directive">throws</span> <span class="exception">Exception</span> {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  MuleEvent result = runFlow(VALIDATE_REQUEST_FLOW, testEvent(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  assertThat(result)
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>   .hasMuleMessageWhich()
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>     .hasStringPayload(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span> }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>}
</pre></div>
</div>
</div>

<p>As you can see, it’s an ordinary JUnit test extending FunctionalMunitSuite class.
There are two thing we need to do in our test:</p>

<ol>
  <li>Prepare <strong>MuleEvent</strong> object as an input to our flow. We can do that by using provided <strong>testEvent(Object payload)</strong> method.</li>
  <li>Execute <strong>runFlow(String flowName, MuleEvent event)</strong> method specifying flow name to test against and event we just created in the first step.</li>
</ol>

<p>Of course, to make our test sensible, we need to assert whether the expected result is equal to what the flow actually produced as an output.</p>

<p>MUnit, by default, scans your <em>mule-deploy.properties</em> file and load all configuration files it can find there to perform the test. It’s rarely the case we’d like to have (except end-to-end testing). Main reason for avoiding that, is speed. We our tests to perform as fast as possible and there is no reason to include whole configuration when we are testing (i.e.) validation logic only. To accomplish that we need to override <strong><em>getConfigResources()</em></strong> method and provide configuration files, which should participate in a test:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">FirstMunitTest</span> <span class="directive">extends</span> FunctionalMunitSuite {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span> <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span> <span class="directive">protected</span> <span class="predefined-type">String</span> getConfigResources() {
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> Joiner.on(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>).join(MAIN_FLOW_CFG, VALIDATE_REQUEST_CFG);
<span class="line-numbers"><a href="#n6" name="n6">6</a></span> }
</pre></div>
</div>
</div>

<p>This method accepts String value with comma separated config file names. To produce such String I use Guava’s Joiner class. All configuration files names should, of course :), be set up as interface constants (i.e. MAIN_FLOW_CFG = “main-flow.xml”)</p>

<p>Another thing we need to know about MUnit is, that all inbound endpoints are skipped by default, meaning the process begin just right after when it would be intercepted by the source endpoint. However, it is still possible to use an inbound entry point for accessing flow in a test. There are two ways to achieve that:</p>

<ul>
  <li>Override <strong><a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-core/munit-runner/src/main/java/org/mule/munit/runner/functional/FunctionalMunitSuite.java#L107">haveToDisableInboundEndpoints()</a></strong> method and make it return <strong>false</strong>, or you can selectively pick flows which won’t have inbound endpoints disabled by:</li>
  <li>Overriding <strong><a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-core/munit-runner/src/main/java/org/mule/munit/runner/functional/FunctionalMunitSuite.java#L89"><span class="o" style="box-sizing: border-box;">getFlowsExcludedOfInbound</span>Disabling()</a></strong> method and providing list of String values with flows to exclude.</li>
</ul>

<p>If you enabled your inbound endpoints, then you can access your flows in the old way. Only thing you need to do is to obtain <strong>MuleClient</strong> from <strong>muleContext</strong>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>MuleClient client = muleContext.getClient();
</pre></div>
</div>
</div>

<p>and use the client instead of <strong>runFlow()</strong> method.</p>

<p>When working with custom connectors and mocking them out is not a desired behavior, there is a method you can use: <a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-core/munit-runner/src/main/java/org/mule/munit/runner/functional/FunctionalMunitSuite.java#L127"><strong>haveToMockMuleConnectors()</strong></a>. In that case, we want to override it and return false.
In terms of packaging, I’m used to keeping my Mule tests in packages named after flow names (then subpackage them if necessary), i.e. <em>pl.poznachowski.munit.example.mainflow</em></p>

<h2 id="property-enricher">Property enricher</h2>
<p>Properties are most widely used features of Mule. Hence, it won’t be uncommon to test part of application with <em>MuleMessage</em> already containing some Mule properties or to mock a message processor to modify them (alter / create / remove).
When creating <em>MuleEvent</em> for testing purposes you only can set payload using provided <strong>testEvent()</strong> method. To make working with properties easier I’ve introduced something I call property enricher. You can fluently apply any kind of property on either <strong>MuleEvent</strong> object or <strong>MuleMessage</strong>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="annotation">@Test</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">public</span> <span class="type">void</span> simplestTest() <span class="directive">throws</span> <span class="exception">Exception</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  MuleEvent testEvent = PropertyEnricher.enrich(testEvent(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>))
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>       .withInvocationProperty(SOME_VARIABLE, <span class="predefined-constant">true</span>)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>       .get();
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  MuleEvent result = runFlow(VALIDATE_REQUEST_FLOW, testEvent);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  assertThat(result)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>   .hasMuleMessageWhich()
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>   .hasStringPayload(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>   .hasInvocationProperty(SOME_VARIABLE).withValue(<span class="predefined-constant">true</span>);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>

<p>If you’d like to give it a try, it’s a part of the same utility project I described before - available <a href="https://github.com/poznachowski/munit-utils">here</a>.</p>

<h2 id="execution-environments">Execution environments</h2>
<p>I think it is always a good idea to parametrize any properties eligible to change between execution environments. This has been well explained in the Confluex blog post. Having prepared beforehand property files for each environment and then not to worry about it during deployment is something I really appreciate. But what if we want to make our flow behave differently between environments? It is also possible due to <em>spring:import</em> capability. Let me show you an example how we can roll it out.
Let’s say that we are exposing a flow through a HTTP/HTTPS endpoint. For functional testing we want to use standard HTTP, but for pre-production (and production of course) we need to work with HTTPS.
To accomplish that, instead of having our endpoint ‘hardcoded’ in the flow, we’ll use flow reference:</p>

<p><img src="http://blog.poznachowski.pl/images/munit/MainFlow.png" /></p>

<p>and set up spring import in the .xml config file:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;spring:beans&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;spring:import</span> <span class="attribute-name">resource</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">classpath:my-endpoint-${connection.type}.xml</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="tag">&lt;/spring:beans&gt;</span>
</pre></div>
</div>
</div>

<p>You shouldn’t care about Studio throwing errors. It is not a rare case, that Studio is complaining about something, which is perfectly ok for Mule ESB itself.
Don’t forget to have <strong>{connection.type}</strong> parameter set up in <strong>wrapper.conf</strong> of each of the Mule instances. Assume to expect only two possibilities here: secured / unsecured. Then we need to prepare two separate configuration files (located on the classpath): <strong>my-endpoint-secured.xml</strong> and <strong>my-endpoint-unsecured.xml</strong> and provide flow reference implementations (secured with HTTPS component, unsecured with HTTP). Remember about having same flow name as in the flow reference. After that, we’re done. Mule instance will pick appropriate setup, basing on the <strong><em>connection.type</em></strong> parameter provided.
One last thing we would need to remember about in terms of testing such constructs. MUnit need to know which HTTP type to test with. We can provide it by adding a system property in the getConfigResources() method:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span> <span class="directive">protected</span> <span class="predefined-type">String</span> getConfigResources() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="predefined-type">System</span>.setProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">connection.type</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">unsecured</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">main-flow.xml</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span> }
</pre></div>
</div>
</div>

<p>Of course those Strings should be extracted to constants, as you would use them a lot.</p>

<h2 id="mocking">Mocking</h2>

<p>It’s time to talk about crucial element of flows testing. In the beginning we need to realize that every component in Mule is a message processor (endpoint, flow reference etc). That makes MUnit powerful tool, as it has the ability to mock any of such things. Lets decompose mock expression into two parts:</p>

<ul>
  <li>Defining mock target</li>
</ul>

<p>You always starts your mock expression with <strong>whenMessageProcessor()</strong> fluent method. Required parameter is the processor name (XML tag name in Mule configuration file).
Then, if our processor is within a namespace we need to apply <strong>.ofNamespace()</strong> method to our mock.
Lastly, if there is more than one element with same name (i.e. flow, sub-flow, endpoints) we need to add <strong>.withAttributes()</strong> method, which takes <em>Map&lt;String,Object&gt;</em> or varargs <em>Attribute</em> as an argument. The latter is easy to create with a static helper structure available: <strong>attribute(String name).withValue(Object value)</strong></p>

<ul>
  <li>Defining mock behaviour</li>
</ul>

<p>When we’re done with target declaration we need to specify how our mock should behave. There are a couple of options here:</p>

<p><strong>.thenReturnSameEvent()</strong> - Means that message processor you mocked out will do nothing (outputs the same thing that came to the processor) during the flow processing.
<strong>.thenThrow(Throwable exception)</strong> - Mocked processor will throw specified exception.
<strong>.thenReturn(MuleMessage message)</strong> - This will return a MuleMessage object prepared beforehand. We can make use of available <strong>muleMessageWithPayload(Object payload)</strong> method to help ourselves here. Actually, I don’t use thenReturn() method much, as it’s not flexible enough. Especially when working with Mule properties and reusable flows.
<strong>.thenApply(MuleMessageTransformer transformer)</strong> - Most flexible method. Here we can prepare and use a Mule transformer, meaning we can do and return almost anything in our message (like quickly add properties using property enricher)</p>

<p>Example of flow mocking:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>whenMessageProcessor(<span class="string"><span class="delimiter">&quot;</span><span class="content">flow</span><span class="delimiter">&quot;</span></span>).withAttributes(attribute(<span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">ValidateHTTPRequest</span><span class="delimiter">&quot;</span></span>)).thenReturnSameEvent();
</pre></div>
</div>
</div>

<p>More examples can be seen <a href="https://github.com/mulesoft/munit/blob/munit-3.4.x/munit-integration-tests/src/test/java/org/mule/java/JavaMunitTest.java">here</a>. (note the contains() part when mocking sub-flows)</p>

<p>While it seems as a great and powerful feature, let me tell you when and why not to use mocking. Referring to our example we have a <em>MainFlow</em> which has several flow references. I want to mock out all those references, to make a simple test of the choice component, whether it routes properly (to send email or not). My first thought with that approach in mind, was to provide only <strong>main-flow.xml</strong> to my MUnit test (I want to have rest of flows mocked). Unfortunately, that’s not possible. Mule needs to set up all flows during start up, meaning it will fail saying that flow couldn’t be found. To overcome that, we would still need to provide all flow constructs (despite mocking), which implies greatly increased Mule start up time. (referenced flows can be complex, compound of even more flows / subflows). Not to mention configuration hassle (did I included all required flows?).
Of course we want our tests to perform as quick as possible. Solution for that is the way I was mocking flows before MUnit era. You need to create simple testing mock flows (with same flow names as in production code) and provide them in getConfigResources() method instead of the originals (<strong>src/test/resources</strong> is a great place to store them), but be careful! When you work with test flows, don’t use Mule Config Flow Editor. Otherwise, you would end up with duplicated tests flows in <strong>src/main/app</strong> folder. There’s a <a href="https://www.mulesoft.org/jira/browse/STUDIO-2285">JIRA ticket</a> for that. It now says it has been resolved in 3.5 Dolomite version. Not sure about the code names… but in my current Mule Studio (Version: 3.5.0 Build Id: 201402101410) it is still not working properly.</p>

<h2 id="implementing-mocked-services">Implementing mocked services</h2>
<p>It may sometimes be useful to simulate some more complex behavior of an external service in a form of a Mule mocked service implementation. We can accomplish that by combining everything we covered so far.
First thing would be to make sure that service outbound address parameters are externalized to a properties file and that property file is made environment specific (via system property - refer to earlier mentioned Confluex blog post). Then we need to code actual mock implementation in a test flow (address parameters can be any). We also need to create property file with mock service address (as it would be an another environment configuration set up).</p>

<p>To wrap everything together we need to set system property (in <strong>getConfigResources()</strong>) to a value we are using in a property file indicating mocked service address. Remember also of adding this mocked service flow to a collection of flows, which shouldn’t have their inbound endpoints disabled. Otherwise, your mocked service won’t be accessible at all.</p>

<p>I know that MUnit also offers FTP, Mail and DB servers that you can spawn on the fly in your tests. However, I didn’t try them out yet, so it’s better you check MUnit <a href="https://github.com/mulesoft/munit/wiki#integration-tests">wiki page</a> for more information on that.</p>

<h2 id="verifying--spying">Verifying &amp; spying</h2>

<p>There two other MUnit features worth mentioning:
Veryfing is a way to assert whether a message processor has been called during test execution. Its semantic is very similar to mocking. Instead of <em>whenMessageProcessor()</em> method we need to use <strong><em>verifyCallOfMessageProcessor()</em></strong> providing processor name with its identification details (if necessary: <em>ofNamespace()</em>, <em>withAttributes()</em>) and then using available assertion methods: <strong><em>.atLeastOnce()</em></strong>, .<strong><em>atLeast()</em></strong>, <em>.<strong>atMost()</strong></em>. Names are self-explanatory. With <strong><em>atLeast()</em></strong> and <em><strong>atMost()</strong></em> you need to provide integer value to make those assertions sensible.</p>

<p>Example validating that send email flow was called at least 2 times:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>verifyCallOfMessageProcessor(FLOW).withAttributes(attribute(NAME).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">SendNotificationEmail</span><span class="delimiter">&quot;</span></span>)).atLeast(<span class="integer">2</span>);
</pre></div>
</div>
</div>

<p>Spying can be used to validate assumptions before any given message processor starts processing or just right after. Again you start the same as with verifying and mocking, but with <strong>spyMessageProcessor()</strong> method. When the target is acquired you can use <strong>.before()</strong> and <strong>.after()</strong> method passing any number of <strong>SpyProcess</strong> instances as an argument.
<strong>SpyProcess</strong> is an interface with one method signature: <strong>void spy(MuleEvent event)</strong>. In that method implementation you can perform your assertions and check the payload in before or after phase.</p>

<p>Example checking variable presence and value, before and after using set-variable component:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>spyMessageProcessor(<span class="string"><span class="delimiter">&quot;</span><span class="content">set-variable</span><span class="delimiter">&quot;</span></span>).withAttributes(attribute(<span class="string"><span class="delimiter">&quot;</span><span class="content">variableName</span><span class="delimiter">&quot;</span></span>).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>))
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  .before(<span class="keyword">new</span> SpyProcess() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>   <span class="annotation">@Override</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>   <span class="directive">public</span> <span class="type">void</span> spy(MuleEvent beforeEvent) <span class="directive">throws</span> MuleException {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    assertThat(beforeEvent)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>     .hasMuleMessageWhich()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      .hasInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>).notSet();
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>   }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  })
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  .after(<span class="keyword">new</span> SpyProcess() {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>   <span class="annotation">@Override</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>   <span class="directive">public</span> <span class="type">void</span> spy(MuleEvent afterEvent) <span class="directive">throws</span> MuleException {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    assertThat(afterEvent)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>     .hasMuleMessageWhich()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      .hasInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>).withValue(<span class="string"><span class="delimiter">&quot;</span><span class="content">hello</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>   }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  });
</pre></div>
</div>
</div>

<h2 id="summary">Summary</h2>
<p>That would be about everything I could come up with. If you have any questions, suggestions please let me know. Lastly, two ‘pro’ :) tips:</p>

<ul>
  <li>do not commit any .flow files (they are required for Studio only, and are being generated from corresponding .xml)</li>
  <li>good log4j configuration can save you a lot of time and trouble!</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Groovy scripts in Mule ESB]]></title>
    <link href="http://blog.poznachowski.pl/2013/11/03/handling-groovy-scripts-in-mule-esb/"/>
    <updated>2013-11-03T00:00:00+01:00</updated>
    <id>http://blog.poznachowski.pl/2013/11/03/handling-groovy-scripts-in-mule-esb</id>
    <content type="html"><![CDATA[<p>In my work project we had to make plenty of XML manipulations on some complex structures. As Mule supports Groovy (<a href="http://groovy.codehaus.org/Scripts+and+Classes">scripts</a>) natively, we decided to make use of Groovy’s <a href="http://groovy.codehaus.org/Processing+XML">XMLSlurper</a>.
Two things I wanted to have covered, before I begin: How to easily handle those scripts in Mule Studio and how to unit test them.</p>

<p><strong>1. Groovy scripts in Mule Studio</strong></p>

<p>Mule, when it comes to <a href="http://www.mulesoft.org/documentation/display/current/Groovy+Component+Reference">Groovy components</a>, can embed script code inside the Mule configuration file or use an external script file. Of course, at all times, I don’t want to clutter my Mule code with embedded scripts. The only exception I make, is when I need to do something simple and I’m unable to use Mule Expression Language to achieve that (i.e. throwing an exception directly from flow - <a href="https://www.mulesoft.org/jira/browse/MULE-6624">JIRA</a>).</p>

<p>First thing I did was installation of Groovy plugin for the IDE. Latest Mule Studio version is 3.5.0, which is based on Eclipse 3.8. Update site URL for the plugin is: <a href="http://dist.springsource.org/release/GRECLIPSE/e4.2/">http://dist.springsource.org/release/GRECLIPSE/e4.2/</a>. My example project was built on Mule ESB 3.4.0. It uses Groovy 1.8.6, hence we have to add an extra Groovy compiler when installing plugin and we have to switch it on in Groovy preferences afterwards.</p>

<p>Next, we need to think about where to locate our scripts. There are several possibilities, but I find most convinient to put them in <strong>src/main/scripts</strong> in a subfolder named as a Mule configuration file, which uses it. Then, we need to force IDE to be as useful as possible, especially the m2e plugin built in Mule Studio. I always work on Maven-supported Mule projects and strongly recommend to do the same.</p>

<ul>
  <li>Enable Groovy scripts folders in Groovy preferences and add <strong>src/main/scripts</strong> and <strong>src/test/scripts</strong> patterns (note that Compiler version is already set to 1.8.6):</li>
</ul>

<p><img src="http://blog.poznachowski.pl/images/mulegroovy/groovy_settings.png" /></p>

<ul>
  <li>Now we need to make sure that Maven will put those scripts in proper location. Ideal for me, is to put them in <strong>classes/scripts</strong> directory. It will cause nice separation with other project resources. Achieving that appeared to be simple. In <strong>pom.xml</strong> specify resources in the <strong>&lt;build&gt;</strong> part:</li>
</ul>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;build&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;resources&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span class="tag">&lt;resource&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>            <span class="tag">&lt;directory&gt;</span>src/main/resources<span class="tag">&lt;/directory&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="tag">&lt;/resource&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="tag">&lt;resource&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="tag">&lt;directory&gt;</span>src/main/scripts<span class="tag">&lt;/directory&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="tag">&lt;targetPath&gt;</span>scripts<span class="tag">&lt;/targetPath&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="tag">&lt;/resource&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="tag">&lt;/resources&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    ...
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="tag">&lt;/build&gt;</span>
</pre></div>
</div>
</div>

<p>Maven’s build <strong>&lt;resources/&gt;</strong> element is described <a href="http://maven.apache.org/pom.html#Resources">here</a>. When doing research about the above I found out something interesting. With the default structure of pom.xml file generated by Mule Studio, all Mule configuration files are duplicated in the built zip file. Sample Mule application structure generated by Maven would look like:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span> \- classes
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  \- mule-config.xml
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  |- mule-deploy.properties
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |- mule-app.properties
<span class="line-numbers"><a href="#n5" name="n5">5</a></span> |- lib
<span class="line-numbers"><a href="#n6" name="n6">6</a></span> |- mule-config.xml
<span class="line-numbers"><a href="#n7" name="n7">7</a></span> |- mule-deploy.properties
<span class="line-numbers"><a href="#n8" name="n8">8</a></span> |- mule-app.properties
</pre></div>
</div>
</div>

<p>Files (<strong>2,3,4</strong>) are redundant (per Mule’s application format <a href="http://www.mulesoft.org/documentation/display/current/Application+Format">reference</a>). Responsible for that mess is <strong>Build Helper Maven Plugin</strong>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;plugin&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;groupId&gt;</span>org.codehaus.mojo<span class="tag">&lt;/groupId&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;artifactId&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/artifactId&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="tag">&lt;version&gt;</span>1.7<span class="tag">&lt;/version&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;executions&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="tag">&lt;execution&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            <span class="tag">&lt;id&gt;</span>add-resource<span class="tag">&lt;/id&gt;</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            <span class="tag">&lt;phase&gt;</span>generate-resources<span class="tag">&lt;/phase&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            <span class="tag">&lt;goals&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>                <span class="tag">&lt;goal&gt;</span>add-resource<span class="tag">&lt;/goal&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            <span class="tag">&lt;/goals&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            <span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="tag">&lt;resources&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                    <span class="tag">&lt;resource&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                        <span class="tag">&lt;directory&gt;</span>src/main/app/<span class="tag">&lt;/directory&gt;</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                    <span class="tag">&lt;/resource&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                <span class="tag">&lt;/resources&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="tag">&lt;/configuration&gt;</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span class="tag">&lt;/execution&gt;</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="tag">&lt;/executions&gt;</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="tag">&lt;/plugin&gt;</span>
</pre></div>
</div>
</div>

<p>If I remove that plugin part, everything still seems to be working perfectly fine and my project’s output structure is neat and clean:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span> \- classes
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  \- scripts
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>   \- GroovyScriptTesting
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    \- CalculateSquareNumber.groovy
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |- log4j.properties
<span class="line-numbers"><a href="#n6" name="n6">6</a></span> |- GroovyScriptTesting.xml
<span class="line-numbers"><a href="#n7" name="n7">7</a></span> |- mule-deploy.properties
<span class="line-numbers"><a href="#n8" name="n8">8</a></span> |- mule-app.properties
</pre></div>
</div>
</div>

<p>It looks like <strong>maven-mule-plugin</strong> is doing all the necessary work for <strong>src/main/app</strong> folder. So, if you know why the build helper plugin is set up in the pom.xml in the first place or if you’re having any problem without it, please let me know.
In the end, with everything in place, my project in Mule Studio should look like this:</p>

<p><img src="http://blog.poznachowski.pl/images/mulegroovy/groovy_project_setup.png" /></p>

<p>and we are ready to go to the second part.</p>

<p><strong>2. Unit testing Groovy scripts</strong></p>

<p>Mule provide direct access to Mule context objects and variables in Groovy scripts the same way as it does for MEL. In terms of testing, it’s important to decide and be consequent about how we are accessing Mule variables:
If I’m sure that the variable will be defined during script execution, I access them directly (as ‘number’ in the example):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">def</span> square = number.toInteger() * number.toInteger()
</pre></div>
</div>
</div>

<p>If it’s possible that the variable won’t be set up (can be a part of the script logic - to check for variable presence), then I would try to get it from the message context (it’s always available):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">def</span> number = message.getInvocationProperty(<span class="string"><span class="delimiter">'</span><span class="content">number</span><span class="delimiter">'</span></span>)
</pre></div>
</div>
</div>

<p>and then do some null checks etc. Otherwise, I would get Groovy’s <strong>MissingPropertyException</strong>.
Setting variables via scripts always needs to happen using message.setProperty method.</p>

<p>Let’s look at this simple Groovy script (<strong>CalculateSquareNumber.groovy</strong>):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">def</span> square = number.toInteger() * number.toInteger()
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>message.setInvocationProperty(<span class="string"><span class="delimiter">'</span><span class="content">squareNumber</span><span class="delimiter">'</span></span>, square)
</pre></div>
</div>
</div>

<p>and it’s unit test (<strong>CalculateSquareNumberTest.java</strong>):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="annotation">@RunWith</span>(JUnitParamsRunner.class)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">CalculateSquareNumberTest</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">String</span> PAYLOAD = <span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="annotation">@Test</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="annotation">@Parameters</span>(method = <span class="string"><span class="delimiter">&quot;</span><span class="content">numbersAndSquares</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="directive">public</span> <span class="type">void</span> test(<span class="type">int</span> number, <span class="type">int</span> square) <span class="directive">throws</span> <span class="exception">Exception</span> {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="predefined-type">Binding</span> binding = <span class="keyword">new</span> <span class="predefined-type">Binding</span>();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        binding.setVariable(<span class="string"><span class="delimiter">&quot;</span><span class="content">number</span><span class="delimiter">&quot;</span></span>, number);
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        binding.setVariable(<span class="string"><span class="delimiter">&quot;</span><span class="content">message</span><span class="delimiter">&quot;</span></span>, TestMuleMessage.withPayload(PAYLOAD));
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        GroovyShell shell = <span class="keyword">new</span> GroovyShell(binding);
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        shell.evaluate(getFile(<span class="string"><span class="delimiter">&quot;</span><span class="content">/scripts/GroovyScriptTesting/CalculateSquareNumber.groovy</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        MuleMessage message = (MuleMessage) binding.getVariable(<span class="string"><span class="delimiter">&quot;</span><span class="content">message</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        assertThat((<span class="predefined-type">Integer</span>)message.getInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">squareNumber</span><span class="delimiter">&quot;</span></span>), is(square));
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="annotation">@SuppressWarnings</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">unused</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="directive">private</span> <span class="predefined-type">Object</span><span class="type">[]</span> numbersAndSquares() {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="keyword">return</span> <span class="error">$</span>(
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>             <span class="error">$</span>(<span class="integer">3</span>, <span class="integer">9</span>),
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>             <span class="error">$</span>(<span class="integer">5</span>, <span class="integer">25</span>),
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>             <span class="error">$</span>(<span class="integer">10</span>, <span class="integer">100</span>),
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>             <span class="error">$</span>(<span class="integer">12</span>, <span class="integer">144</span>)
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        );
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="directive">private</span> <span class="predefined-type">File</span> getFile(<span class="predefined-type">String</span> pathToFile) <span class="directive">throws</span> <span class="exception">URISyntaxException</span>, <span class="exception">FileNotFoundException</span> {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="predefined-type">URL</span> url = CalculateSquareNumberTest.class.getResource(pathToFile);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="keyword">if</span> (url == <span class="predefined-constant">null</span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">FileNotFoundException</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">Couldn't find: </span><span class="delimiter">&quot;</span></span> + pathToFile);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="keyword">return</span> <span class="keyword">new</span> <span class="predefined-type">File</span>(url.toURI());
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>}
</pre></div>
</div>
</div>

<p>To evaluate Groovy scripts in our test we need to use <a href="http://groovy.codehaus.org/api/groovy/lang/GroovyShell.html">GroovyShell</a> along with <a href="http://groovy.codehaus.org/api/groovy/lang/Binding.html">Binding</a>’s setVariable() method to make variables available. As you can see it’s pretty easy, the trickier part is how to pass proper MuleMessage instance to our test. To do that, I have prepared helper <strong>TestMuleMessage</strong> class, which is preparing message with default Mule context:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">TestMuleMessage</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">public</span> <span class="directive">static</span> MuleMessage withPayload(<span class="predefined-type">Object</span> payload) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        MuleContextFactory contextFactory = <span class="keyword">new</span> DefaultMuleContextFactory();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        MuleContext muleContext = <span class="predefined-constant">null</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="keyword">try</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            muleContext = contextFactory.createMuleContext();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        } <span class="keyword">catch</span> (InitialisationException e) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            e.printStackTrace();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        } <span class="keyword">catch</span> (<span class="exception">ConfigurationException</span> e) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>            e.printStackTrace();
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span class="keyword">return</span> <span class="keyword">new</span> DefaultMuleMessage(payload, muleContext);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<p>Another useful thing in the test is the helper <strong>getFile()</strong> method which retrieves script file not from hardcoded full path, but from classpath instead, which is always a better idea. Usually, you would put it in some test util class.
Your main target for assertions is <strong>MuleMessage</strong> object, which can be retrieved using Binding <strong>getVariable</strong>() method. There you can check for variables’ values or message payload itself.
As you can see, keeping few simple rules, can make work with Groovy scripts (in Mule) a pleasant, easily testable experience. Sample project, I prepared, is using Quartz endpoint and Groovy script to count and display square number of number 5 :) It is available <a href="https://github.com/poznachowski/GroovyScriptTesting">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposing RESTful interface with Mule pt.2]]></title>
    <link href="http://blog.poznachowski.pl/2013/10/20/exposing-restful-interface-with-mule-pt2/"/>
    <updated>2013-10-20T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2013/10/20/exposing-restful-interface-with-mule-pt2</id>
    <content type="html"><![CDATA[<p>In <a href="http://blog.poznachowski.pl/2013/10/11/exposing-restful-interface-with-mule-pt1/">previous part</a> of this article I’ve presented two ways of building REST API on Mule ESB: using Mule REST Module and handling HTTP properties manually.</p>

<p>This time I want to present achieving the same result using Mule <a href="http://www.mulesoft.org/documentation/display/current/REST+Component+Reference">Jersey Module</a> with addition of<br />
<a href="http://www.mulesoft.org/documentation/display/current/Component+Bindings">Component Bindings</a> - feature of Mule, which enables us to leave Java and go back to Mule flow processing.</p>

<p>Presented example was tested against Mule ESB 3.4.0 EE.</p>

<p><strong>3. Jersey REST</strong></p>

<p>Flow overview:<br />
<img src="http://blog.poznachowski.pl/images/mulerest2/JerseyRestFlow.png" />
<img src="http://blog.poznachowski.pl/images/mulerest2/ProcessPostFlow.png" />
<img src="http://blog.poznachowski.pl/images/mulerest2/ProcessGetFlow.png" /></p>

<p>Unfortunately, not much to see in this graphical overview - devil is in the details :)</p>

<p>Jersey REST Component is the official recommendation for exposing REST Services on Mule ESB. Usually, this reference implementation of JAX-RS would be everything we need to achieve the goal. However, in terms of Mule, it ties us heavily to Java code, which is not what we are especially looking for. To overcome this we can use Component Bindings.</p>

<p>Let’s go back to our example. Staring with the simple Jersey service class:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="annotation">@Path</span>(value = <span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span>)  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">JerseyRestService</span> {  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="directive">private</span> FlowProcessing flowProcessing;  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span class="annotation">@GET</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> <span class="annotation">@Path</span>(value = <span class="string"><span class="delimiter">&quot;</span><span class="content">/client/{accountID}/{userID}/get</span><span class="delimiter">&quot;</span></span>)  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> <span class="directive">public</span> Response processGET(<span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> accountId, <span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> userId) {  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="predefined-type">String</span> result = flowProcessing.processGET(accountId, userId);  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="keyword">return</span> Response.ok(result).build();  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> }  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> <span class="annotation">@POST</span>  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span> <span class="annotation">@Path</span>(value = <span class="string"><span class="delimiter">&quot;</span><span class="content">/client/{accountID}/{userID}/get</span><span class="delimiter">&quot;</span></span>)  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span> <span class="directive">public</span> Response processPOST(<span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> accountId, <span class="annotation">@PathParam</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span>) <span class="predefined-type">String</span> userId, <span class="predefined-type">String</span> body) {  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="predefined-type">String</span> result = flowProcessing.processPOST(accountId, userId, body);  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  <span class="keyword">return</span> Response.ok(result).build();  
<span class="line-numbers"><a href="#n18" name="n18">18</a></span> }  
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span> <span class="directive">public</span> <span class="type">void</span> setFlowProcessing(FlowProcessing flowProcessing) {  
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  <span class="local-variable">this</span>.flowProcessing = flowProcessing;  
<span class="line-numbers"><a href="#n22" name="n22">22</a></span> }  
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>}  
</pre></div>
</div>
</div>

<p>Nothing fancy here. JAX-RS plain and simple. Interesting part is the FlowProcessing interface. It looks like it’s wrapping whole business logic processing. By using Component Bindings we can make any Mule’s outbound endpoint behave as an implementation of that interface. Hence, we can make use of VM endpoints and move the processing from Java back to Mule flows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;jersey:resources</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">REST</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;component</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.JerseyRestService</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;binding</span> <span class="attribute-name">interface</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.FlowProcessing</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">method</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">processGET</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      <span class="tag">&lt;vm:outbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessGET</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;/binding&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;binding</span> <span class="attribute-name">interface</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.FlowProcessing</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">method</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">processPOST</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span class="tag">&lt;vm:outbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="tag">&lt;/binding&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;/component&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="tag">&lt;jersey:exception-mapper</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.BadURIExceptionMapper</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="tag">&lt;/jersey:resources&gt;</span>  
</pre></div>
</div>
</div>

<p>As seen above, everything we need to make it work is to provide binding element specifying the interface, interface’s method and outbound endpoint, which should be called. Few things to remember:</p>

<ul>
  <li>Don’t forget to write setter for the interface in the Jersey class. </li>
  <li>Make sure that request and response of the interface and endpoint matches </li>
  <li>It is possible to have the method return MuleMessage. It lets Java component have access to whole message, not only payload.</li>
</ul>

<p>Flows with the “business logic” for POST and GET methods processing are described below:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGetFlow</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGetFlow</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;vm:inbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">VM</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="tag">&lt;transformer</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Populate variables</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing GET with account id: #[accountID] and user id: #[userID]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="tag">&lt;/flow&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPostFlow</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPostFlow</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  <span class="tag">&lt;vm:inbound-endpoint</span> <span class="attribute-name">exchange-pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">request-response</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">path</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">vmProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">VM</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="tag">&lt;transformer</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Populate variables</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing POST with account id: #[accountID] and user id: #[userID] and body: #[payload]</span><span class="delimiter">&quot;</span></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="tag">&lt;/flow&gt;</span>  
</pre></div>
</div>
</div>

<p>Input parameters of the FlowProcessing interface methods comes in the Mule flows as an Object array. We can map them into Mule parameters by writting and setting global transformer:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;custom-transformer</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.PopulateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Java</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
</div>
<p>and reusing it in the flows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;transformer</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">populateVariables</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
</div>

<p>PopulateVariables Java transformer:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">PopulateVariables</span> <span class="directive">extends</span> AbstractMessageTransformer {  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> <span class="annotation">@Override</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="directive">public</span> MuleMessage transformMessage(MuleMessage message, <span class="predefined-type">String</span> outputEncoding) <span class="directive">throws</span> <span class="exception">TransformerException</span> {  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="predefined-type">Object</span><span class="type">[]</span> args = message.getPayload(<span class="predefined-type">Object</span><span class="type">[]</span>.class);  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  message.setInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span>, args[<span class="integer">0</span>]);  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  message.setInvocationProperty(<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span>, args[<span class="integer">1</span>]);  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="comment">// For POST method  </span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">if</span> (args.length &gt; <span class="integer">2</span>) {  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>   message.setPayload(args[<span class="integer">2</span>]);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  }  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="keyword">return</span> message;  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span> }  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}  
</pre></div>
</div>
</div>

<p>We have everything in place to make it work. One thing I don’t like is that Jersey for requests with URL not met is returning 404 HTTP status (Not Found). I find 400 status (Bad Request) more appropriate in such case and I’d like to keep 404 reserved for situations where URL was met, but resource was not found. Satysfying that requirement is fairly simple. We need to add a custom exception mapper in Jersey definition:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;jersey:exception-mapper</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">pl.poznachowski.jerseyrest.BadURIExceptionMapper</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
</div>

<p>with implementation:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">public</span> <span class="type">class</span> <span class="class">BadURIExceptionMapper</span> <span class="directive">implements</span> ExceptionMapper&lt;NotFoundException&gt; {  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="directive">public</span> Response toResponse(NotFoundException exception){  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      <span class="keyword">return</span> Response.status(Response.Status.BAD_REQUEST).entity(<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown resource: </span><span class="delimiter">&quot;</span></span> + exception.getNotFoundUri().toString()).build();  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }  
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}  
</pre></div>
</div>
</div>

<p><strong>Note:</strong> It is possible to catch exceptions thrown in the binded outbound endpoints. To make that possible we just need to declare exception in binding interface method.</p>

<p>To test described solution I used the same set of tests as in previous post. However I was having problems testing successful scenarios using MUnit:</p>

<div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">ERROR 2013-10-17 22:30:02,434 [main] org.mule.exception.DefaultMessagingExceptionStrategy:</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">********************************************************************************</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">Message               : Failed to invoke JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Component that caused exception is: JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Message payload is of type: String</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">Code                  : MULE_ERROR--2</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">--------------------------------------------------------------------------------</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">Exception stack is:</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">1\. The required object/property "muleContext" is null (java.lang.IllegalArgumentException)</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">  org.mule.DefaultMuleMessage:292 (null)</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">2\. Failed to invoke JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Component that caused exception is: JerseyResourcesComponent$EnhancerByCGLIB$8a425d6{JerseyRestFlow.component.206873183}. Message payload is of type: String (org.mule.component.ComponentException)</span></div>

<div align="left" style="font-family: Tahoma; orphans: 2; widows: 2;"><span style="font-family: Consolas; font-size: xx-small;">  org.mule.component.AbstractComponent:148 (http://www.mulesoft.org/docs/site/current3/apidocs/org/mule/component/ComponentException.html)</span></div>

</div>

<p>It seems that muleContext is not propagated correctly with MUnit and reflective proxy classes. Switching <a href="https://github.com/poznachowski/JerseyREST/blob/master/src/test/java/pl/poznachowski/jerseyrest/JerseyRESTTest.java">test class</a> to use ‘official’ FunctionalTestCase instead of MUnit worked like a charm.</p>

<p>Full example at GitHub: <a href="https://github.com/poznachowski/JerseyREST/">JerseyREST</a></p>

<p>That were all the solutions for exposing REST Services I can think of.<br />
In my work project, I’m using the REST Module and it’s doing its job well. Thus, if you want build REST API and use all of the nifty Mule features  I would suggest going with the Router Module.<br />
If you prefer to be more Java-centric, make use of Mule for handling integration matter only or to use Mule flows to a smaller extent then Jersey approach will fit in.</p>

<p>For more information about Component Bindings I encourage you to read Mule’s well-written <a href="http://blogs.mulesoft.org/mule-component-bindings/">blog post</a> explaining the feature.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposing RESTful interface with Mule pt.1]]></title>
    <link href="http://blog.poznachowski.pl/2013/10/11/exposing-restful-interface-with-mule-pt1/"/>
    <updated>2013-10-11T00:00:00+02:00</updated>
    <id>http://blog.poznachowski.pl/2013/10/11/exposing-restful-interface-with-mule-pt1</id>
    <content type="html"><![CDATA[<p><strong>Update (20.10.2013)</strong> - When not supported HTTP method is used, return more appropriate HTTP status (405 instead of 400).</p>

<p>As it’s my first blog entry I’d like to welcome everyone. If you’d like to know more about me click on the tab above. If not.. I’ll go straight to the point.</p>

<p>Recently, I had to create Mule’s application, which exposes itself via a simple RESTful API. However, when it comes to REST, Mule ESB seems to be quite limited in viable options.<br />
The only, official approach is to use the <a href="http://www.mulesoft.org/documentation/display/current/REST+Component+Reference">REST Component</a>, which relies on <a href="https://jersey.java.net/">Jersey</a>, which is the Reference Implementation of JAX-RS. Sounds good, but it ties you to the Java code instead of having fun with the Mule’s message processing :) This can be overcome as well, but still some Java needs to be written.</p>

<p>Fortunately, there are some other possibilites, which would make simple REST API creation easier. Nevertheless, I’d like to present you all the options (of which I’m aware of) with description and a working example.</p>

<p>All presented examples were tested against Mule ESB 3.4.0 EE. However, they should run without any problems on CE and even on previous versions.</p>

<p><strong>1. “Poor man’s” REST:</strong></p>

<p>First approach is the most straightforward one - handling HTTP properties available in Mule manually. Quick overview over HTTP properties is available <a href="http://www.mulesoft.org/documentation/download/attachments/96633423/Archived_Mule_Developer_Notes_20130816.pdf?version=1&amp;modificationDate=1376677251871">here</a> - (1.4.7 Use Case) in archived Mule Developer Resources.</p>

<p>In that case, we need to take care of detecting the HTTP method, URL and fetching URL variable parameters by ourselves. We can accomplish that using Mule’s choice component and setting flow variables (if needed).<br />
An example will accept URL (on 8088 port) as follows: <strong>/client/{accountID}/{userID}/get</strong> on both <strong>GET</strong> and <strong>POST</strong> HTTP methods, where {accountID} and {userID} are the variable parameters.</p>

<p>General overview of the flow:<br />
<img src="http://blog.poznachowski.pl/images/mulerest1/PoorMansRESTFlow.png" /></p>

<p>First step is not necessary, but helpful for quick suppresion of favicon.ico requests when accesing service via browsers:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;message-filter</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Filter favicon</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;not-filter&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;wildcard-filter</span> <span class="attribute-name">casesensitive</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">pattern</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/favicon.ico</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/wildcard-filter&gt;</span><span class="tag">&lt;/not-filter&gt;</span>  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="tag">&lt;/message-filter&gt;</span>  
</pre></div>
</div>
</div>

<p>To match URL let’s use choice component with regular expression:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;choice</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Choice</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;when</span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[regex('/client/\\w+/\\w+/get/?', message.inboundProperties['http.request.path'])]</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>   ...  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="tag">&lt;/when&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;otherwise&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">400</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 400 For bad URL</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown resource: #[message.inboundProperties['http.request.path']]</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;/otherwise&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="tag">&lt;/choice&gt;</span>  
</pre></div>
</div>
</div>

<p>We retrieve URL path using Mule’s inbound property - ‘http.request.path’, then match it with the regexp ‘/client/\w+/\w+/get/?’. If we don’t have a match we just simply return 400 HTTP status.<br />
Otherwise, we can proceed and determine which HTTP method was used to send the request:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>  <span class="tag">&lt;when</span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">message.inboundProperties['http.method'] == 'GET'</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Retrieve Parameters</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process GET</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/when&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;when</span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">message.inboundProperties['http.method'] == 'POST'</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Retrieve Parameters</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process POST</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="tag">&lt;/when&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;otherwise&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">405</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 405 For bad HTTP method</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown HTTP method: #[message.inboundProperties['http.method']]</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span class="tag">&lt;/otherwise&gt;</span>  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="tag">&lt;/choice&gt;</span>  
</pre></div>
</div>
</div>

<p>This time we are checking another inbound parameter - ‘http.method’. If it’s not the method we want to proceed with, we return 405 HTTP status (Method Not Allowed).</p>

<p>For all supported methods we want to fetch the URL parameters. Hence, this functionality is extracted to a reusable sub-flow:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;sub-flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">RetrievingParameters</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;set-variable</span> <span class="attribute-name">variableName</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">accountID</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[StringUtils.splitAndTrim(message.inboundProperties['http.request.path'], '/')[1]]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Account ID</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="tag">&lt;set-variable</span> <span class="attribute-name">variableName</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">userID</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[StringUtils.splitAndTrim(message.inboundProperties['http.request.path'], '/')[2]]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set User ID</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="tag">&lt;/sub-flow&gt;</span>
</pre></div>
</div>
</div>

<p>As I’m not good at regular expressions, I decided to go with Mule’s StringUtils method, which splits the URL and gets me the parameters I’m looking for.</p>

<p>To avoid providing fully qualified name of the class over and over again, we can define global import for Mule expressions:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;configuration</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Configuration</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;expression-language&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;import</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">org.mule.util.StringUtils</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/expression-language&gt;</span>  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="tag">&lt;/configuration&gt;</span>  
</pre></div>
</div>
</div>

<p>That is basically everything we needed. We can now process GET / POST requests. For readability and maintainability reasons we will do that in separate flows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">200</span><span class="delimiter">&quot;</span></span><span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return OK</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing POST with account id: #[accountID] and user id: #[userID] and body: #[payload]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="tag">&lt;/flow&gt;</span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="tag">&lt;flow</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">200</span><span class="delimiter">&quot;</span></span><span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return OK</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Processing GET with account id: #[accountID] and user id: #[userID]</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Set Payload</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="tag">&lt;/http:response-builder&gt;</span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="tag">&lt;/flow&gt;</span>
</pre></div>
</div>
</div>

<p>To test my service I’ve prepared a <a href="https://github.com/poznachowski/PoorMansREST/blob/master/src/test/java/pl/poznachowski/poormanrest/PoorMansRESTTest.java">test class</a> with couple of Mule functional tests. Instead of using default <a href="http://www.mulesoft.org/documentation/display/current/Functional+Testing">FunctionalTestCases</a>, I suggest using <a href="https://github.com/mulesoft/munit">MUnit</a>. From what I know, it is supposed to replace current Mule testing solution in future. With MUnit you can write your tests using Java (JUnit) or XML (Mule code). It has features like mocking endpoints, processors and ability to call flow directly, skipping inbound endpoints. However, development of MUnit seemed to slow down recently.<br />
To keep the test concise, I used <a href="https://code.google.com/p/junitparams/">JUnitParams</a> extension, as I wanted to use same test methods, but with different input (URLs).</p>

<p>Additionally, we could’ve checked for content-type etc., but I didn’t want to clutter the code with insignificant details.<br />
Having in mind next example, I’m not exactly sure, if anyone would opt for this approach. But still, there it is, probably for demonstration purposes only ;)</p>

<p>Full example at GitHub: <a href="https://github.com/Poznachowski/PoorMansREST">PoorMansREST</a></p>

<p><strong>2. REST Router</strong></p>

<p>To make our lives easier <a href="http://mulesoft.github.io/mule-module-rest-router/">Mule REST Router Module</a> has been developed. Code is available at <a href="https://github.com/mulesoft/mule-module-rest-router">GitHub</a>.<br />
Almost everything we did in previous approach is wrapped into one message processor. Installation and configuration is well explained in the links provided.</p>

<p>Flow overview:<br />
<img src="http://blog.poznachowski.pl/images/mulerest1/RestWithRouterFlow.png" /></p>

<p>Basically, to implement same behaviour, we need to configure rest-router as follows:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;rest-router:router</span> <span class="attribute-name">templateUri</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">/client/{accountID}/{userID}/get</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;rest-router:get&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessGET</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process GET</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="tag">&lt;/rest-router:get&gt;</span>  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;rest-router:post&gt;</span>  
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    <span class="tag">&lt;flow-ref</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">ProcessPOST</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Process POST</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  <span class="tag">&lt;/rest-router:post&gt;</span>  
<span class="line-numbers"><a href="#n8" name="n8">8</a></span><span class="tag">&lt;/rest-router:router&gt;</span>  
</pre></div>
</div>
</div>

<p>REST Router automatically assign parameters specified in templateUri to flow variables. However, I found out that it passes through empty parameters, so it is advisable to validate them explicitly in your code.&lt;/div&gt;</p>

<p>Outstanding part is to cover invalid URLs and return something meaningful. For requests not matching our template we return standard 400 HTTP status (placed just after &lt;/rest-router:router&gt;) :</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;http:response-builder</span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">400</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 400 For bad URL</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown resource: #[message.inboundProperties['http.request.path']]</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="tag">&lt;/http:response-builder&gt;</span>  
</pre></div>
</div>
</div>

<p>For HTTP methods not supported REST Router should (per documentation) throw <a href="http://mulesoft.github.io/mule-module-rest-router/java/org/mule/modules/rest/UnsupportedHttpVerbException.html">UnsupportedHttpVerbException</a>. However, there is an issue I submitted <a href="https://github.com/mulesoft/mule-module-rest-router/issues/4">here</a>. Unfortunately, the project looks abandoned as nobody cared :) I did some more research and it appears that the issue is not in the REST Router itself, but how the <a href="http://www.mulesoft.org/documentation/display/current/Anypoint+Connector+DevKit+Guide">DevKit</a> java code is generated.<br />
There are two solutions for that:<br />
1) Always implement whole set of methods in REST Router and return appriopriate message / status / throw exception in those you don’t want to support.<br />
2) As I don’t like to have redundancy in my code I used a dirty hack of replacing compiled class with a fixed one directly in the jar file. Amended version of the module is available <a href="https://dl.dropboxusercontent.com/u/17262593/blog/mule-module-rest-router-fixed.zip">here</a>. Just install it in your local Maven repository and switch module version in your pom.xml file to 1.2-fixed.</p>

<p><strong>Fix description:</strong></p>

<p>HTTP method recognition is implemented as in the following snippet: (<strong>RestRouterModule.java</strong>)</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">if</span> (get != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">get</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="keyword">return</span> get.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (put != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">put</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="keyword">return</span> put.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (post != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">post</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span class="keyword">return</span> post.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (delete != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">delete</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> <span class="keyword">return</span> delete.processWithExtraProperties(properties);  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (patch != <span class="predefined-constant">null</span> &amp;&amp; method.equalsIgnoreCase(<span class="string"><span class="delimiter">&quot;</span><span class="content">patch</span><span class="delimiter">&quot;</span></span>)) {  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> <span class="keyword">return</span> patch.processWithExtraProperties(properties);  
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>} <span class="keyword">else</span> {  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedHttpVerbException(method);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<p>Variables: get, put, post… are instances of NestedProcessor class, marked @Optional.<br />
However, code generated by DevKit always propagates those variables to the RestRouterModule as instances of NestedProcessorChain (<strong>RouterMessageProcessor.java</strong>):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">final</span> NestedProcessor _transformedGet = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) get));  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="directive">final</span> NestedProcessor _transformedPut = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) put));  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="directive">final</span> NestedProcessor _transformedPost = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) post));  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="directive">final</span> NestedProcessor _transformedDelete = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) delete));  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="directive">final</span> NestedProcessor _transformedPatch = <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) patch));  
</pre></div>
</div>
</div>

<p>Those _transformed method variables are passed into the RestRouterModule class, hence it always tries to process the <strong>processWithExtraProperties(properties)</strong> method and eventually finishes with NullPointerException as the last argument in NestedProcessorChain contructor is null.</p>

<p>My fixed version of <strong>RouterMessageProcessor.java</strong> includes following change:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="directive">final</span> NestedProcessor _transformedGet = (get == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) get));  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="directive">final</span> NestedProcessor _transformedPut = (put == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) put));  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="directive">final</span> NestedProcessor _transformedPost = (post == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) post));  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="directive">final</span> NestedProcessor _transformedDelete = (delete == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) delete));  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="directive">final</span> NestedProcessor _transformedPatch = (patch == <span class="predefined-constant">null</span>) ? <span class="predefined-constant">null</span> : <span class="keyword">new</span> NestedProcessorChain(event, getMuleContext(), ((MessageProcessor) patch));
</pre></div>
</div>
</div>

<p>Not much to explain here. Now, if a REST module HTTP method is not defined it will propagate null to <strong>RestRouterModule.java</strong> and throw UnsupportedHttpVerbException as expected.&lt;/div&gt;</p>

<p>In the flow we use standard choice exception strategy and catch the UnsupportedHttpVerbException to return 405 HTTP status:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;choice-exception-strategy</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Choice Exception Strategy</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>   <span class="tag">&lt;catch-exception-strategy</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Catch Exception Strategy</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">enablenotifications</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">when</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#[exception.causedBy(UnsupportedHttpVerbException)]</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>  
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>       <span class="tag">&lt;http:response-builder</span> <span class="attribute-name">doc:name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Return 405 For bad HTTP method</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">status</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">405</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;set-payload</span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Unknown HTTP method: #[message.inboundProperties['http.method']]</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/set-payload&gt;</span><span class="tag">&lt;/http:response-builder&gt;</span> 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>   <span class="tag">&lt;/catch-exception-strategy&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="tag">&lt;/choice-exception-strategy&gt;</span>  
</pre></div>
</div>
</div>

<p>For testing I used the same set of tests as in previous example. As you can see, it’s much quicker and cleaner approach that saves you a lot of time and lines of code :)</p>

<p>Full example (using modified version of the module) at GitHub: <a href="https://github.com/poznachowski/RestWithRouter">RestWithRouter</a></p>

<p>In the next part I will present how to achieve the same, but using Jersey with writing as little Java as possible. Go <a href="http://poznachowski.blogspot.com/2013/10/exposing-restful-interface-with-mule-pt2.html">here</a> for the second part!&lt;/div&gt;</p>
]]></content>
  </entry>
  
</feed>
